
import java.awt.Toolkit;
import java.io.File;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author trinhdangmau
 */
public class CrossTab_form extends javax.swing.JFrame {
        Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst =null;

    /**
     * Creates new form CrossTab_form
     */
    public CrossTab_form() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        Update_crosstab_table();
        setIcon();
    }

    
    private void setIcon() {
        try {
        String decodedPath = URLDecoder.decode(javaconnect.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
        String purl = decodedPath.substring(0, decodedPath.lastIndexOf("/"));
        String Url = purl+"/Image/iconimage.png";
        setIconImage(Toolkit.getDefaultToolkit().getImage(Url));

        } catch (UnsupportedEncodingException e){
            JOptionPane.showMessageDialog(null, e);}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        crosstab_table = new javax.swing.JTable();
        cmd_test = new javax.swing.JButton();
        cmd_csv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        crosstab_table.setAutoCreateRowSorter(true);
        crosstab_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(crosstab_table);

        cmd_test.setText("test");
        cmd_test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_testActionPerformed(evt);
            }
        });

        cmd_csv.setText("to .csv");
        cmd_csv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_csvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_test, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmd_csv)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_test)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmd_csv)
                        .addContainerGap(375, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(22, 22, 22))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmd_testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_testActionPerformed
    
        ArrayList<String> list = new ArrayList<String>();
        
        try{
        String sql1 = "SELECT LocalityID FROM Locality WHERE Locationidi = 'PS'";
        
        pst=conn.prepareStatement(sql1);
       rs=pst.executeQuery();
        while(rs.next()){
            String locaid = rs.getString("localityid");
        list.add("COUNT(CASE WHEN localityID = '"+locaid+"' THEN localityID END) AS "+locaid+" ");
        }
                }
        catch (SQLException e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (SQLException e){}}

        String listString = "";

        for (String s : list) {listString += s + ",";}
        
        String newlistt = listString.substring(0, listString.length()-1);

            System.out.println(newlistt);
    }//GEN-LAST:event_cmd_testActionPerformed

    private void cmd_csvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_csvActionPerformed
        
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table Species to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();
        
        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File is existed! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
        //follow is main part for export
            try{
                FileWriter fw = new FileWriter(outputDirPath);
                for(int k=0; k<crosstab_table.getColumnCount(); k++){
                   fw.append(crosstab_table.getModel().getColumnName(k)); fw.append(','); 
            }fw.append('\n');
                for(int j=0; j<crosstab_table.getRowCount();j++){
                    for(int i=0; i<crosstab_table.getColumnCount();i++){
                        fw.append(crosstab_table.getModel().getValueAt(j, i).toString()); fw.append(',');
                    }
                    fw.append('\n');
                }
                fw.flush();
                fw.close();
                JOptionPane.showMessageDialog(null, "Table species was exported");
            }catch (Exception e){JOptionPane.showMessageDialog(null, e);} finally {try {rs.close(); pst.close();}catch (Exception e){}}
            
        }
    }//GEN-LAST:event_cmd_csvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrossTab_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrossTab_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrossTab_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrossTab_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrossTab_form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_csv;
    private javax.swing.JButton cmd_test;
    private javax.swing.JTable crosstab_table;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void Update_crosstab_table() {
        //Create the String list of locality
        ArrayList<String> list = new ArrayList<String>();
        
        try{
        //String sql1 = "SELECT LocalityID FROM 'Locality' WHERE Locationidi = 'BT'";
        String sql1 ="SELECT * FROM Locality WHERE Locationidi = 'BT' OR Locationidi = 'TH'OR Locationidi = 'TT' OR Locationidi = 'PS'";
        pst=conn.prepareStatement(sql1);
       rs=pst.executeQuery();
        while(rs.next()){
            String locaid = rs.getString("localityid");
        list.add("COUNT(CASE WHEN localityID = '"+locaid+"' THEN localityID END) AS "+locaid+" ");}
            }
        catch (SQLException e){JOptionPane.showMessageDialog(null, e);} 
        finally {try {rs.close(); pst.close();}catch (SQLException e){}}

        String listString = "";
        for (String s : list) {listString += s + ",";}
        String newListString = listString.substring(0, listString.length()-1);
        
        try{
        String sql = "SELECT spname, speciesid, "+newListString+" FROM 'Speciemen' LEFT JOIN 'Species' WHERE 'Species'.speciesid = 'Speciemen'.specieid AND 'Species'.countsp = 'FALSE'  Group by spname";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        crosstab_table.setModel(DbUtils.resultSetToTableModel(rs));
                }
        catch (SQLException e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (SQLException e){}}
    }
}
