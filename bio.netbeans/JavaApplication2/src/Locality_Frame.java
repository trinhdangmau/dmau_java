
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author trinhdangmau
 */
public class Locality_Frame extends javax.swing.JFrame {
    Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst =null;
    /**
     * Creates new form Locality_Frame
     */
    public Locality_Frame() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        Update_table_locality();
        setIcon();
    }
private void setIcon() {
        try {
        String decodedPath = URLDecoder.decode(javaconnect.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
        String purl = decodedPath.substring(0, decodedPath.lastIndexOf("/"));
        String Url = purl+"/Image/iconimage.png";
        setIconImage(Toolkit.getDefaultToolkit().getImage(Url));

        } catch (UnsupportedEncodingException e){
            JOptionPane.showMessageDialog(null, e);}
    }
    
    private void count_number_locality(){
    String locationid = txt_locationid.getText().toUpperCase();
    try {
        String sql1="SELECT count(Localityid) FROM 'Locality' WHERE Locationidi = '"+locationid+"' ";
           pst =conn.prepareStatement(sql1);
           rs =pst.executeQuery();
           
           if (rs.next()){
               String count = rs.getString("count(Localityid)");
               lable_numberlocality.setText("Total Number of Locality:"+count);
           }
        }catch (Exception e){JOptionPane.showMessageDialog(null, e); }
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }
    
    
    private void Update_table_locality(){
        try{
        String sql = "SELECT 'locality'.localityid, 'locality'.localityname, 'location'.name FROM 'locality'INNER JOIN 'location' ON 'locality'.locationidi = 'location'.locationid ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        table_locality.setModel(DbUtils.resultSetToTableModel(rs));
        table_locality.getColumnModel().getColumn(0).setPreferredWidth(12);
        table_locality.getColumnModel().getColumn(1).setPreferredWidth(12);
                }
        catch (Exception e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (Exception e){}}
    
    try {
        String sql1="SELECT count(Localityid) FROM 'Locality' ";
           pst =conn.prepareStatement(sql1);
           rs =pst.executeQuery();
           
           if (rs.next()){
               String count = rs.getString("count(Localityid)");
               lable_numberlocality.setText("Total Number of Locality:"+count);
           }
        }catch (Exception e){JOptionPane.showMessageDialog(null, e); }
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_locality = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_date = new javax.swing.JTextField();
        txt_localityid = new javax.swing.JTextField();
        txt_locationname = new javax.swing.JTextField();
        txt_coord = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_note = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_locationid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_localityname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmd_addnew = new javax.swing.JButton();
        cmd_save = new javax.swing.JButton();
        cmd_update = new javax.swing.JButton();
        cmd_delete = new javax.swing.JButton();
        cmd_close = new javax.swing.JButton();
        cmd_searchlocation = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lable_numberlocality = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cmd_refreshtable = new javax.swing.JMenuItem();
        cmd_closem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        cmd_exportxls = new javax.swing.JMenuItem();
        cmd_exportcsv = new javax.swing.JMenuItem();
        cmd_importcsv = new javax.swing.JMenuItem();
        cmd_deleteall = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        table_locality.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_locality.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_localityMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_locality);

        jLabel2.setText("Locality Name:");

        jLabel1.setText("Locality ID:");

        jLabel7.setText("Note:");

        jLabel5.setText("Date:");

        jLabel3.setText("Location ID:");

        txt_locationid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_locationidKeyReleased(evt);
            }
        });

        jLabel6.setText("Coordinate:");

        jLabel4.setText("Location Name:");

        cmd_addnew.setText("Add New");
        cmd_addnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_addnewActionPerformed(evt);
            }
        });

        cmd_save.setText("Save");
        cmd_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_saveActionPerformed(evt);
            }
        });

        cmd_update.setText("Update");
        cmd_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_updateActionPerformed(evt);
            }
        });

        cmd_delete.setText("Delete");
        cmd_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_deleteActionPerformed(evt);
            }
        });

        cmd_close.setText("Close");
        cmd_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_closeActionPerformed(evt);
            }
        });

        cmd_searchlocation.setText("Search");
        cmd_searchlocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_searchlocationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_localityid)
                            .addComponent(txt_localityname)
                            .addComponent(txt_locationid)
                            .addComponent(txt_locationname)
                            .addComponent(txt_date)
                            .addComponent(txt_coord)
                            .addComponent(txt_note, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmd_addnew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmd_save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmd_update))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmd_delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmd_close)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmd_searchlocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(29, 29, 29))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmd_addnew, cmd_close, cmd_delete, cmd_save, cmd_update});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_localityid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_localityname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_locationid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_locationname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_coord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_note, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_addnew)
                    .addComponent(cmd_save)
                    .addComponent(cmd_update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_delete)
                    .addComponent(cmd_close)
                    .addComponent(cmd_searchlocation))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel8.setText("Locality Information");

        lable_numberlocality.setText("Number of Locality:");

        jMenu1.setText("File");

        cmd_refreshtable.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        cmd_refreshtable.setText("Refresh table");
        cmd_refreshtable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_refreshtableActionPerformed(evt);
            }
        });
        jMenu1.add(cmd_refreshtable);

        cmd_closem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        cmd_closem.setText("Close");
        cmd_closem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_closemActionPerformed(evt);
            }
        });
        jMenu1.add(cmd_closem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Tools");

        cmd_exportxls.setText("Export to .xls");
        cmd_exportxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportxlsActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_exportxls);

        cmd_exportcsv.setText("Export to .csv");
        cmd_exportcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportcsvActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_exportcsv);

        cmd_importcsv.setText("Import from .csv");
        cmd_importcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_importcsvActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_importcsv);

        cmd_deleteall.setText("Delete all");
        cmd_deleteall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_deleteallActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_deleteall);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Help");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lable_numberlocality, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lable_numberlocality))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void table_localityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_localityMouseClicked
        try{
        int row=table_locality.getSelectedRow();
        String Table_click=(table_locality.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT 'locality'.*, 'location'.name FROM 'locality'INNER JOIN 'location' ON 'locality'.locationidi = 'location'.locationid WHERE 'locality'.localityid ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String localityid =rs.getString("localityid");
                txt_localityid.setText(localityid);
                String localityname =rs.getString("localityname");
                txt_localityname.setText(localityname); 
                String locationid =rs.getString("locationidi");
                txt_locationid.setText(locationid); 
                String locationname =rs.getString("name");
                txt_locationname.setText(locationname); 
                String date =rs.getString("date");
                txt_date.setText(date); 
                String coord =rs.getString("coordinate");
                txt_coord.setText(coord); 
                String note =rs.getString("note");
                txt_note.setText(note); 
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_table_localityMouseClicked

    private void cmd_addnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_addnewActionPerformed
        txt_localityid.setText("");
        txt_localityname.setText("");
        txt_coord.setText("");
        txt_locationid.setText("");
        txt_locationname.setText("");
        txt_date.setText("");
        txt_note.setText("");
    }//GEN-LAST:event_cmd_addnewActionPerformed

    private void cmd_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_saveActionPerformed
        try{
            String sql ="INSERT INTO locality (localityid, localityname, locationidi, date, coordinate, note) values (?,?,?,?,?,?)";

                pst =conn.prepareStatement(sql);
                pst.setString(1, txt_localityid.getText());
                pst.setString(2, txt_localityname.getText());
                pst.setString(3, txt_locationid.getText().toUpperCase());
                pst.setString(4, txt_date.getText());
                pst.setString(5, txt_coord.getText());
                pst.setString(6, txt_note.getText());
                pst.execute();

            JOptionPane.showMessageDialog(null, "One new Locality was added");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

        Update_table_locality();
    }//GEN-LAST:event_cmd_saveActionPerformed

    private void cmd_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_updateActionPerformed
        try{
            String  localityid = txt_localityid.getText();
            String localityname = txt_localityname.getText();
            String locationid = txt_locationid.getText().toUpperCase();
            String date = txt_date.getText();
            String coord = txt_coord.getText();
            String note = txt_note.getText();

            String sql ="UPDATE locality SET localityname ='"+localityname+"', locationidi = '"+locationid+"', date = '"+date+"', coordinate = '"+coord+"', note = '"+note+"' WHERE localityid ='"+localityid+"'  ";
            pst=conn.prepareStatement(sql);
            pst.execute();


            JOptionPane.showMessageDialog(null, "One Locality was Updated");

        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}

        Update_table_locality();
    }//GEN-LAST:event_cmd_updateActionPerformed

    private void cmd_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_deleteActionPerformed
        int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete Class", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            String sql="DELETE from locality where localityid = ?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, txt_localityid.getText());
            pst.execute();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }

        Update_table_locality();
    }//GEN-LAST:event_cmd_deleteActionPerformed

    private void cmd_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_closeActionPerformed
        try {rs.close();pst.close();dispose();}catch (Exception e){}
    }//GEN-LAST:event_cmd_closeActionPerformed

    private void cmd_closemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_closemActionPerformed
        try {rs.close();pst.close();dispose();}catch (Exception e){}
    }//GEN-LAST:event_cmd_closemActionPerformed

    private void txt_locationidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_locationidKeyReleased
    String temp= txt_locationid.getText().toUpperCase();
    //gan species id toi txt   
    try{    
        String sql="SELECT * FROM 'location' WHERE locationid ='"+temp+"' ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String add1 =rs.getString("name");
                txt_locationname.setText(add1);
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_txt_locationidKeyReleased

    private void cmd_searchlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_searchlocationActionPerformed
        String locationid = txt_locationid.getText().toUpperCase();
        try{
        String sql = "SELECT 'locality'.localityid, 'locality'.localityname, 'location'.name FROM 'locality'INNER JOIN 'location' ON 'locality'.locationidi = 'location'.locationid WHERE 'locality'.locationidi = '"+locationid+"' ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        table_locality.setModel(DbUtils.resultSetToTableModel(rs));
        table_locality.getColumnModel().getColumn(0).setPreferredWidth(12);
        table_locality.getColumnModel().getColumn(1).setPreferredWidth(12);
                }
        catch (Exception e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (Exception e){}}
        
        count_number_locality();
    }//GEN-LAST:event_cmd_searchlocationActionPerformed

    private void cmd_refreshtableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_refreshtableActionPerformed
        Update_table_locality();
    }//GEN-LAST:event_cmd_refreshtableActionPerformed

    private void cmd_exportxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportxlsActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle("Export Locality to .xls file");
    int retval = chooser.showSaveDialog(null);
    File f = chooser.getSelectedFile();
    String outputDirPath=f.getAbsolutePath();
    
    if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File is existed! Do you want to over write?", "Over-write", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("Locality");

            Row titlerow = personSheet.createRow(0);
            Cell nametitle = titlerow.createCell(0);
            nametitle.setCellValue("Locality List Information");

            Row headerRow = personSheet.createRow(1);
                Cell localityid = headerRow.createCell(0);
                    localityid.setCellValue("Locality ID");
                Cell localityname = headerRow.createCell(1);
                    localityname.setCellValue("Locality Name");
                Cell locationid = headerRow.createCell(2);
                    locationid.setCellValue("Location ID");
                Cell date = headerRow.createCell(3);
                    date.setCellValue("Date");
                Cell coordinate = headerRow.createCell(4);
                    coordinate.setCellValue("Coordinate");
                Cell image = headerRow.createCell(5);
                    image.setCellValue("Image");
                Cell note = headerRow.createCell(6);
                    note.setCellValue("Note");

            try{
            String sql = "SELECT LocalityID, LocalityName, LocationIDi, Date, Coordinate, Image, Note FROM 'Locality'  "
                    + " ORDER BY LocationIDi ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 2;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);
                    
                Cell localityidCell = dataRow.createCell(0);
                    localityidCell.setCellValue(rs.getString("LocalityID"));
                Cell localitynameCell = dataRow.createCell(1);
                    localitynameCell.setCellValue(rs.getString("LocalityName"));
                Cell locationidCell = dataRow.createCell(2);
                    locationidCell.setCellValue(rs.getString("LocationIDi"));
                Cell dateCell = dataRow.createCell(3);
                    dateCell.setCellValue(rs.getString("Date"));
                Cell coordinateCell = dataRow.createCell(4);
                    coordinateCell.setCellValue(rs.getString("Coordinate"));
                Cell imageCell = dataRow.createCell(5);
                    imageCell.setCellValue(rs.getString("Image"));
                Cell noteCell = dataRow.createCell(6);
                    noteCell.setCellValue(rs.getString("Note"));    
                    
                row = row + 1;
            }


            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "The Locality List was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }
    }//GEN-LAST:event_cmd_exportxlsActionPerformed

    private void cmd_exportcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportcsvActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table Locality to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File is existed! Do you want to over write?", "Over-write", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT * FROM 'Locality' ORDER BY Locationidi ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            while(rs.next()) {
                fw.append('"'); fw.append(rs.getString("LocalityID")); fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("LocalityName"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("LocationIDi"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Date"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Coordinate"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Image"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Note"));fw.append('"'); fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table Locality was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
    }//GEN-LAST:event_cmd_exportcsvActionPerformed

    private void cmd_importcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_importcsvActionPerformed
        int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to Locality?", "Import Locality", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filename1 = f.getAbsolutePath();
            
            BufferedReader br = new BufferedReader(new FileReader(filename1));
            String line;

            while((line = br.readLine())!=null){
            line = line.substring(1, line.length() - 1);
            line=line.replace("null", " ");
            String[]value=line.split("\",\""); //seperator
            String sql = "INSERT INTO 'Locality' (LocalityID, LocalityName, LocationIDi, Date, Coordinate, Image, Note) "
                    + "values ('"+value[0]+"', '"+value[1]+"', '"+value[2]+"', '"+value[3]+"', '"+value[4]+"', '"+value[5]+"', '"+value[6]+"')";
            pst=conn.prepareStatement(sql);
            pst.executeUpdate();
            }
            br.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }

        Update_table_locality();
    }//GEN-LAST:event_cmd_importcsvActionPerformed

    private void cmd_deleteallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_deleteallActionPerformed
    int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Locality", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            String sql="DELETE FROM 'Locality'";
            pst=conn.prepareStatement(sql);
            pst.execute();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }
    Update_table_locality();
    }//GEN-LAST:event_cmd_deleteallActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Locality_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Locality_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Locality_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Locality_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Locality_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_addnew;
    private javax.swing.JButton cmd_close;
    private javax.swing.JMenuItem cmd_closem;
    private javax.swing.JButton cmd_delete;
    private javax.swing.JMenuItem cmd_deleteall;
    private javax.swing.JMenuItem cmd_exportcsv;
    private javax.swing.JMenuItem cmd_exportxls;
    private javax.swing.JMenuItem cmd_importcsv;
    private javax.swing.JMenuItem cmd_refreshtable;
    private javax.swing.JButton cmd_save;
    private javax.swing.JButton cmd_searchlocation;
    private javax.swing.JButton cmd_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lable_numberlocality;
    private javax.swing.JTable table_locality;
    private javax.swing.JTextField txt_coord;
    private javax.swing.JTextField txt_date;
    private javax.swing.JTextField txt_localityid;
    private javax.swing.JTextField txt_localityname;
    private javax.swing.JTextField txt_locationid;
    private javax.swing.JTextField txt_locationname;
    private javax.swing.JTextField txt_note;
    // End of variables declaration//GEN-END:variables
}
