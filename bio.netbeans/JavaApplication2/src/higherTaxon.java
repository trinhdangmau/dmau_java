
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mautrinhdang
 */
public class higherTaxon extends javax.swing.JFrame {
    Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst =null;

    /**
     * Creates new form higherTaxon
     */
    public higherTaxon() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        setIcon();
    }
    
private void setIcon() {
        try {
        String decodedPath = URLDecoder.decode(javaconnect.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
        String purl = decodedPath.substring(0, decodedPath.lastIndexOf("/"));
        String Url = purl+"/Image/iconimage.png";
        setIconImage(Toolkit.getDefaultToolkit().getImage(Url));

        } catch (UnsupportedEncodingException e){
            JOptionPane.showMessageDialog(null, e);}
    }
    
    private void Update_table_class(){

            String sql ="SELECT class.classid AS 'ID', class.classname AS 'Class Name' FROM class";
            try{

            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_class.setModel(DbUtils.resultSetToTableModel(rs));
                    }
            catch (Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close(); pst.close();}catch (Exception e){}}
        } 
    private void Close(){
    try {
        rs.close();
        pst.close();
        dispose();
        }catch (Exception e){}
    }
    
    private void Update_table_order(){

            String sql ="SELECT 'order'.orderid, 'order'.ordername, 'class'.classname FROM 'order' LEFT JOIN 'class' ON 'class'.classid = 'order'.classido";
            try{

            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_order.setModel(DbUtils.resultSetToTableModel(rs));
                    }
            catch (Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close(); pst.close();}catch (Exception e){}}
        }

    private void Update_table_family(){

            String sql ="SELECT 'family'.familyid, 'family'.familyname, 'order'.ordername FROM 'family' LEFT JOIN 'order' ON 'order'.orderid = 'family'.orderidf";
            try{

            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_family.setModel(DbUtils.resultSetToTableModel(rs));
                    }
            catch (Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close(); pst.close();}catch (Exception e){}}
        }
    
    
    private void Update_table_genus(){

            String sql ="SELECT 'genus'.genusid, 'genus'.genusname, 'family'.familyname FROM 'genus' LEFT JOIN 'family' ON 'family'.familyid = 'genus'.familyidg";
            try{

            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_genus.setModel(DbUtils.resultSetToTableModel(rs));
                    }
            catch (Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close(); pst.close();}catch (Exception e){}}
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pane_highertaxon = new javax.swing.JTabbedPane();
        panel_genus = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txt_familygenusname = new javax.swing.JTextField();
        txt_familygenusid = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_genusid = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txt_genusname = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_genus = new javax.swing.JTable();
        panel_family = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txt_orderfamilyname = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_orderfamilyid = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_familyid = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txt_familyname = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_family = new javax.swing.JTable();
        panel_order = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_orderid = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_ordername = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_order = new javax.swing.JTable();
        txt_classordername = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_classorderid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        panel_class = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_classid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_classname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_class = new javax.swing.JTable();
        panel_phylum = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cmd_addnew = new javax.swing.JButton();
        cmd_save = new javax.swing.JButton();
        cmd_update = new javax.swing.JButton();
        cmd_delete = new javax.swing.JButton();
        cmd_close1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        cmd_tool = new javax.swing.JMenu();
        cmd_export = new javax.swing.JMenuItem();
        cmd_exportcsv = new javax.swing.JMenuItem();
        cmd_import = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        cmd_deleteall = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Higher Taxon");

        pane_highertaxon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pane_highertaxonMouseClicked(evt);
            }
        });

        jLabel11.setText("Family Name:");

        txt_familygenusname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_familygenusnameKeyReleased(evt);
            }
        });

        jLabel12.setText("Family ID:");

        jLabel13.setText("Genus ID:");

        jLabel14.setText("Genus Name:");

        table_genus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        table_genus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_genusMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(table_genus);

        javax.swing.GroupLayout panel_genusLayout = new javax.swing.GroupLayout(panel_genus);
        panel_genus.setLayout(panel_genusLayout);
        panel_genusLayout.setHorizontalGroup(
            panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_genusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_genusLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txt_genusname, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_genusLayout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_genusid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel11)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_genusLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(txt_familygenusname, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_genusLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_familygenusid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_genusLayout.setVerticalGroup(
            panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_genusLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panel_genusLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_familygenusname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txt_familygenusid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(panel_genusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txt_genusid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_genusname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        pane_highertaxon.addTab("Genus", panel_genus);

        jLabel7.setText("Order Name:");

        txt_orderfamilyname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_orderfamilynameKeyReleased(evt);
            }
        });

        jLabel8.setText("Order ID:");

        jLabel9.setText("Family ID:");

        jLabel10.setText("Family Name:");

        table_family.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        table_family.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_familyMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(table_family);

        javax.swing.GroupLayout panel_familyLayout = new javax.swing.GroupLayout(panel_family);
        panel_family.setLayout(panel_familyLayout);
        panel_familyLayout.setHorizontalGroup(
            panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_familyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_familyLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txt_familyname, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_familyLayout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_familyid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_familyLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(txt_orderfamilyname, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_familyLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_orderfamilyid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_familyLayout.setVerticalGroup(
            panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_familyLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panel_familyLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_orderfamilyname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_orderfamilyid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(panel_familyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txt_familyid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_familyname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        pane_highertaxon.addTab("Family", panel_family);

        jLabel3.setText("Order ID:");

        jLabel4.setText("Order Name:");

        table_order.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        table_order.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_orderMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_order);

        txt_classordername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_classordernameKeyReleased(evt);
            }
        });

        jLabel5.setText("Class Name:");

        jLabel6.setText("Class ID:");

        javax.swing.GroupLayout panel_orderLayout = new javax.swing.GroupLayout(panel_order);
        panel_order.setLayout(panel_orderLayout);
        panel_orderLayout.setHorizontalGroup(
            panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_orderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_orderLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txt_ordername, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_orderLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_orderid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_orderLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(txt_classordername, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_orderLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_classorderid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_orderLayout.setVerticalGroup(
            panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_orderLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panel_orderLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_classordername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txt_classorderid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(panel_orderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_orderid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_ordername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        pane_highertaxon.addTab("Order", panel_order);

        jLabel1.setText("Class ID:");

        jLabel2.setText("Class Name:");

        table_class.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        table_class.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_classMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_class);

        javax.swing.GroupLayout panel_classLayout = new javax.swing.GroupLayout(panel_class);
        panel_class.setLayout(panel_classLayout);
        panel_classLayout.setHorizontalGroup(
            panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_classLayout.createSequentialGroup()
                .addGroup(panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_classLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(panel_classLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_classid, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_classLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(txt_classname, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_classLayout.setVerticalGroup(
            panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_classLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_classLayout.createSequentialGroup()
                        .addGroup(panel_classLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_classid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_classname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 123, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pane_highertaxon.addTab("Class", panel_class);

        javax.swing.GroupLayout panel_phylumLayout = new javax.swing.GroupLayout(panel_phylum);
        panel_phylum.setLayout(panel_phylumLayout);
        panel_phylumLayout.setHorizontalGroup(
            panel_phylumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );
        panel_phylumLayout.setVerticalGroup(
            panel_phylumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        pane_highertaxon.addTab("Phylum", panel_phylum);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        pane_highertaxon.addTab("G", jPanel6);

        cmd_addnew.setText("Add New");
        cmd_addnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_addnewActionPerformed(evt);
            }
        });

        cmd_save.setText("Save");
        cmd_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_saveActionPerformed(evt);
            }
        });

        cmd_update.setText("Update");
        cmd_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_updateActionPerformed(evt);
            }
        });

        cmd_delete.setText("Delete");
        cmd_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_deleteActionPerformed(evt);
            }
        });

        cmd_close1.setText("Close");
        cmd_close1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_close1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Close");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        cmd_tool.setText("Tools");

        cmd_export.setText("Export to .xls");
        cmd_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportActionPerformed(evt);
            }
        });
        cmd_tool.add(cmd_export);

        cmd_exportcsv.setText("Export to .csv");
        cmd_exportcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportcsvActionPerformed(evt);
            }
        });
        cmd_tool.add(cmd_exportcsv);

        cmd_import.setText("Import from .csv");
        cmd_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_importActionPerformed(evt);
            }
        });
        cmd_tool.add(cmd_import);
        cmd_tool.add(jSeparator1);

        cmd_deleteall.setText("Delete all");
        cmd_deleteall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_deleteallActionPerformed(evt);
            }
        });
        cmd_tool.add(cmd_deleteall);

        jMenuBar1.add(cmd_tool);

        jMenu4.setText("Help");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem2.setText("About");
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pane_highertaxon)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmd_addnew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmd_close1)
                .addGap(111, 111, 111))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmd_addnew, cmd_close1, cmd_delete, cmd_save, cmd_update});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pane_highertaxon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_addnew)
                    .addComponent(cmd_save)
                    .addComponent(cmd_update)
                    .addComponent(cmd_delete)
                    .addComponent(cmd_close1))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Close();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void pane_highertaxonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pane_highertaxonMouseClicked
        if (pane_highertaxon.getSelectedIndex()==0){
            Update_table_genus();
        }
        if (pane_highertaxon.getSelectedIndex()==1){
            Update_table_family();
        }
        if (pane_highertaxon.getSelectedIndex()==2){
            Update_table_order();
        }
        if (pane_highertaxon.getSelectedIndex()==3){    
        Update_table_class(); 
        }
        if (pane_highertaxon.getSelectedIndex()==4){
            JOptionPane.showMessageDialog(null, "this is panel phylum");
        }
        if (pane_highertaxon.getSelectedIndex()==5){
            JOptionPane.showMessageDialog(null, "this is panel G");
        }
    }//GEN-LAST:event_pane_highertaxonMouseClicked

    private void table_classMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_classMouseClicked
        try{
        int row=table_class.getSelectedRow();
        String Table_click=(table_class.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT * FROM class WHERE class.classid ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String classid =rs.getString("classID");
                txt_classid.setText(classid);
                String classname =rs.getString("classname");
                txt_classname.setText(classname);  
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_table_classMouseClicked

    private void cmd_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_updateActionPerformed
        if (pane_highertaxon.getSelectedIndex()==3){
            try{
                String classid=txt_classid.getText();
                String classname =txt_classname.getText();

                String sql ="UPDATE class SET classid ='"+classid+"', classname ='"+classname+"' WHERE classID ='"+classid+"'  ";
                pst=conn.prepareStatement(sql);
                pst.execute();


                JOptionPane.showMessageDialog(null, "One Class was Updated");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_class();
        }
        //tab 2
        if (pane_highertaxon.getSelectedIndex()==2){
            try{
                String classorderid=txt_classorderid.getText();
                String ordername =txt_ordername.getText();
                String orderid =txt_orderid.getText();

                String sql ="UPDATE 'order' SET ordername ='"+ordername+"', classido ='"+classorderid+"' WHERE orderid ='"+orderid+"'  ";
                pst=conn.prepareStatement(sql);
                pst.execute();


                JOptionPane.showMessageDialog(null, "One order was Updated");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_order();
        }
        //tab family 01
        if (pane_highertaxon.getSelectedIndex()==1){
            try{
                String orderfamilyid=txt_orderfamilyid.getText();
                String familyname =txt_familyname.getText();
                String familyid =txt_familyid.getText();

                String sql ="UPDATE 'family' SET familyname ='"+familyname+"', orderidf ='"+orderfamilyid+"' WHERE familyid ='"+familyid+"'  ";
                pst=conn.prepareStatement(sql);
                pst.execute();


                JOptionPane.showMessageDialog(null, "One family was Updated");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_family();
        }
        //tab family 00
        if (pane_highertaxon.getSelectedIndex()==0){
            try{
                String familygenusid=txt_familygenusid.getText();
                String genusname =txt_genusname.getText();
                String genusid =txt_genusid.getText();

                String sql ="UPDATE 'genus' SET genusname ='"+genusname+"', familyidg ='"+familygenusid+"' WHERE genusid ='"+genusid+"'  ";
                pst=conn.prepareStatement(sql);
                pst.execute();


                JOptionPane.showMessageDialog(null, "One genus was Updated");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_genus();
        }
    }//GEN-LAST:event_cmd_updateActionPerformed

    private void cmd_addnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_addnewActionPerformed
        if (pane_highertaxon.getSelectedIndex()==3){
            try{
                String sql="SELECT max(classid) FROM class";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    if(rs.next()){
                        int classidmax = rs.getInt("max(classid)");
                        String classidnext = String.valueOf(classidmax + 1);
                        txt_classid.setText(classidnext);
                    }
                txt_classname.setText("");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_class();
        }
        
        if (pane_highertaxon.getSelectedIndex()==2){
            try{
                String sql="SELECT max(orderid) FROM 'order'";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    if(rs.next()){
                        String orderidnext = String.valueOf(rs.getInt("max(orderid)") + 1);
                        txt_orderid.setText(orderidnext);
                    }
                
                txt_classordername.setText("");
                txt_classorderid.setText("");
                txt_ordername.setText("");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_order();
        }
        
        if (pane_highertaxon.getSelectedIndex()==1){
            try{
                String sql="SELECT max(familyid) FROM 'family'";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    if(rs.next()){
                        String familyidnext = String.valueOf(rs.getInt("max(familyid)") + 1);
                        txt_familyid.setText(familyidnext);
                    }
                
                txt_orderfamilyname.setText("");
                txt_orderfamilyid.setText("");
                txt_familyname.setText("");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_order();
        }
        
         if (pane_highertaxon.getSelectedIndex()==0){
            try{
                String sql="SELECT max(genusid) FROM 'genus'";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    if(rs.next()){
                        String genusidnext = String.valueOf(rs.getInt("max(genusid)") + 1);
                        txt_genusid.setText(genusidnext);
                    }
                
                txt_familygenusname.setText("");
                txt_familygenusid.setText("");
                txt_genusname.setText("");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_order();
        }
    }//GEN-LAST:event_cmd_addnewActionPerformed

    private void cmd_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_saveActionPerformed
        if (pane_highertaxon.getSelectedIndex()==3){
            try{
            String sql ="INSERT INTO class (classid, classname) values (?,?)";

                pst =conn.prepareStatement(sql);
                pst.setString(2, txt_classname.getText());
                pst.setString(1, txt_classid.getText());
                pst.execute();

            JOptionPane.showMessageDialog(null, "One new class was added");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_class();
        }
        
        //tab order 02
        if (pane_highertaxon.getSelectedIndex()==2){
            try{
            String sql ="INSERT INTO 'order' (orderid, classido, ordername) values (?,?,?)";

               pst =conn.prepareStatement(sql);
               pst.setString(1, txt_orderid.getText());
               pst.setString(2, txt_classorderid.getText());
               pst.setString(3, txt_ordername.getText());
               pst.execute();

            JOptionPane.showMessageDialog(null, "One new order was added");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_order();
        }
        
        //tab family 01
        if (pane_highertaxon.getSelectedIndex()==1){
            try{
            String sql ="INSERT INTO 'family' (familyid, orderidf, familyname) values (?,?,?)";

               pst =conn.prepareStatement(sql);
               pst.setString(1, txt_familyid.getText());
               pst.setString(2, txt_orderfamilyid.getText());
               pst.setString(3, txt_familyname.getText());
               pst.execute();

            JOptionPane.showMessageDialog(null, "One new family was added");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_family();
        }
        //tab family 00
        if (pane_highertaxon.getSelectedIndex()==0){
            try{
            String sql ="INSERT INTO 'genus' (genusid, familyidg, genusname) values (?,?,?)";

               pst =conn.prepareStatement(sql);
               pst.setString(1, txt_genusid.getText());
               pst.setString(2, txt_familygenusid.getText());
               pst.setString(3, txt_genusname.getText());
               pst.execute();

            JOptionPane.showMessageDialog(null, "One new genus was added");

            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}

            Update_table_genus();
        }
        
    }//GEN-LAST:event_cmd_saveActionPerformed

    private void cmd_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_deleteActionPerformed
        if (pane_highertaxon.getSelectedIndex()==3){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete Class", JOptionPane.YES_NO_OPTION);
            if (p==0){
            //String sql="DELETE from Species where speciesID = ?";
            try{
                String sql="DELETE from class where classid = ?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_classid.getText());
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_class();
        }
        
        //tab2
        if (pane_highertaxon.getSelectedIndex()==2){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete Order", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE from 'order' where orderid = ?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_orderid.getText());
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_order();
        }
        
        //Family tab 01
        if (pane_highertaxon.getSelectedIndex()==1){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete Family", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE from 'family' where familyid = ?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_familyid.getText());
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_family();
        }
        //Family tab 00
        if (pane_highertaxon.getSelectedIndex()==0){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete Genus", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE from 'genus' where genusid = ?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_genusid.getText());
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_genus();
        }
        
    }//GEN-LAST:event_cmd_deleteActionPerformed

    private void table_orderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_orderMouseClicked
        try{
        int row=table_order.getSelectedRow();
        String Table_click=(table_order.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT *  FROM 'order' LEFT JOIN 'class' ON 'class'.classid = 'order'.classido WHERE 'order'.orderid ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String classid =rs.getString("classido");
                txt_classorderid.setText(classid);
                String classname =rs.getString("classname");
                txt_classordername.setText(classname); 
                String ordername =rs.getString("ordername");
                txt_ordername.setText(ordername); 
                String orderid =rs.getString("orderid");
                txt_orderid.setText(orderid); 
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        
    }//GEN-LAST:event_table_orderMouseClicked

    private void txt_classordernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_classordernameKeyReleased
        String tmp1 =(String)txt_classordername.getText();
        String tmp = Character.toUpperCase(tmp1.charAt(0)) + tmp1.substring(1);
        try{
        String sql="SELECT *  FROM 'class' WHERE 'class'.classname ='"+tmp+"'   ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();

        if(rs.next()){
            String classid =rs.getString("classid");
            txt_classorderid.setText(classid);
        }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        
        
    }//GEN-LAST:event_txt_classordernameKeyReleased

    private void txt_orderfamilynameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_orderfamilynameKeyReleased
        String tmp1 =(String)txt_orderfamilyname.getText();
        String tmp = Character.toUpperCase(tmp1.charAt(0)) + tmp1.substring(1);
        try{
        String sql="SELECT *  FROM 'order' WHERE 'order'.ordername ='"+tmp+"'   ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();

        if(rs.next()){
            String orderid =rs.getString("orderid");
            txt_orderfamilyid.setText(orderid);
        }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_txt_orderfamilynameKeyReleased

    private void table_familyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_familyMouseClicked
        try{
        int row=table_family.getSelectedRow();
        String Table_click=(table_family.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT *  FROM 'family' LEFT JOIN 'order' ON 'order'.orderid = 'family'.orderidf WHERE 'family'.familyid ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String classid =rs.getString("orderidf");
                txt_orderfamilyid.setText(classid);
                String classname =rs.getString("ordername");
                txt_orderfamilyname.setText(classname); 
                String ordername =rs.getString("familyname");
                txt_familyname.setText(ordername); 
                String orderid =rs.getString("familyid");
                txt_familyid.setText(orderid); 
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_table_familyMouseClicked

    private void txt_familygenusnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_familygenusnameKeyReleased
        String tmp1 =(String)txt_familygenusname.getText();
        String tmp = Character.toUpperCase(tmp1.charAt(0)) + tmp1.substring(1);
        try{
        String sql="SELECT *  FROM 'family' WHERE 'family'.familyname ='"+tmp+"'   ";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();

        if(rs.next()){
            String familyid =rs.getString("familyid");
            txt_familygenusid.setText(familyid);
        }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_txt_familygenusnameKeyReleased

    private void table_genusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_genusMouseClicked
        try{
        int row=table_genus.getSelectedRow();
        String Table_click=(table_genus.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT *  FROM 'genus' LEFT JOIN 'family' ON 'family'.familyid = 'genus'.familyidg WHERE 'genus'.genusid ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String familyid =rs.getString("familyidg");
                txt_familygenusid.setText(familyid);
                String familyname =rs.getString("familyname");
                txt_familygenusname.setText(familyname); 
                String genusname =rs.getString("genusname");
                txt_genusname.setText(genusname); 
                String genusid =rs.getString("genusid");
                txt_genusid.setText(genusid); 
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_table_genusMouseClicked

    private void cmd_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportActionPerformed
    if (pane_highertaxon.getSelectedIndex()==3){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save CLASS table to .xls File");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("Class");

            Row headerRow = personSheet.createRow(0);
                Cell classid = headerRow.createCell(0); classid.setCellValue("ClassID");
                Cell classname = headerRow.createCell(1); classname.setCellValue("ClassName");

            try{
            String sql = " SELECT classid, classname FROM 'class' ORDER BY classid, classname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 1;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);
                
            Cell classidcell = dataRow.createCell(0); classidcell.setCellValue(rs.getString("classid"));
            Cell classnamecell = dataRow.createCell(1); classnamecell.setCellValue(rs.getString("classname"));
            
            row = row + 1;
            }


            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Table CLASS was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        }
    }
        
        //tab2
    if (pane_highertaxon.getSelectedIndex()==2){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save .xls File to..");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("Order");

            Row headerRow = personSheet.createRow(0);
                Cell orderid = headerRow.createCell(0); orderid.setCellValue("orderid");
                Cell ordername = headerRow.createCell(1); ordername.setCellValue("OrderName");
                Cell classido = headerRow.createCell(2); classido.setCellValue("ClassIDo");

            try{
            String sql = " SELECT orderid, ordername, classido FROM 'order' ORDER BY orderid, ordername ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 1;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);
                
            Cell orderidcell = dataRow.createCell(0); orderidcell.setCellValue(rs.getString("orderid"));
            Cell ordernamecell = dataRow.createCell(1); ordernamecell.setCellValue(rs.getString("ordername"));
            Cell classidocell = dataRow.createCell(2); classidocell.setCellValue(rs.getString("classido"));
            
            row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Table ORDER was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        }
        }
        
        //Family tab 01
        if (pane_highertaxon.getSelectedIndex()==1){
        JFileChooser chooser = new JFileChooser();
        //chooser.setApproveButtonText("Save");
        chooser.setDialogTitle("Save .xls File to..");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("family");

            Row headerRow = personSheet.createRow(0);
                Cell familyid = headerRow.createCell(0); familyid.setCellValue("familyid");
                Cell familyname = headerRow.createCell(1); familyname.setCellValue("familyname");
                Cell orderidf = headerRow.createCell(2); orderidf.setCellValue("orderidf");

            try{
            String sql = " SELECT familyid, familyname, orderidf FROM 'family' ORDER BY familyid, familyname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 1;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);
                
            Cell familyidcell = dataRow.createCell(0); familyidcell.setCellValue(rs.getString("familyid"));
            Cell orderidfcell = dataRow.createCell(1); orderidfcell.setCellValue(rs.getString("orderidf"));
            Cell familynamecell = dataRow.createCell(2); familynamecell.setCellValue(rs.getString("familyname"));
            row = row + 1;
            }


            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Table FAMILY was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        }
        }
        //Family tab 00
    if (pane_highertaxon.getSelectedIndex()==0){
        JFileChooser chooser = new JFileChooser();
        //chooser.setApproveButtonText("Save");
        chooser.setDialogTitle("Save GENUS to .xls File");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("Genus");

            Row headerRow = personSheet.createRow(0);
                Cell genusid = headerRow.createCell(0); genusid.setCellValue("genusID");
                Cell familyidg = headerRow.createCell(1); familyidg.setCellValue("familyidg");
                Cell genusname = headerRow.createCell(2); genusname.setCellValue("genusname");

            try{
            String sql = " SELECT genusid, familyidg, genusname FROM 'genus' ORDER BY genusid, genusname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 1;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);
                
            Cell genusidcell = dataRow.createCell(0); genusidcell.setCellValue(rs.getString("genusid"));
            Cell familyidfcell = dataRow.createCell(1); familyidfcell.setCellValue(rs.getString("familyidg"));
            Cell genusnamecell = dataRow.createCell(2); genusnamecell.setCellValue(rs.getString("genusname"));
            
            row = row + 1;
            }


            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Table GENUS was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        }
        }
        
    }//GEN-LAST:event_cmd_exportActionPerformed

    private void cmd_close1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_close1ActionPerformed
        Close();
    }//GEN-LAST:event_cmd_close1ActionPerformed

    private void cmd_deleteallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_deleteallActionPerformed
    if (pane_highertaxon.getSelectedIndex()==3){
        int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Class", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            String sql="DELETE FROM 'class'";
            pst=conn.prepareStatement(sql);
            pst.execute();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }

        Update_table_class();
    }
        
        //tab2
        if (pane_highertaxon.getSelectedIndex()==2){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Order", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE FROM 'order'";
                pst=conn.prepareStatement(sql);
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_order();
        }
        
        //Family tab 01
        if (pane_highertaxon.getSelectedIndex()==1){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Family", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE FROM 'family'";
                pst=conn.prepareStatement(sql);
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_family();
        }
        //Family tab 00
        if (pane_highertaxon.getSelectedIndex()==0){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Genus", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                String sql="DELETE FROM 'genus'";
                pst=conn.prepareStatement(sql);
                pst.execute();
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_genus();
        }
    }//GEN-LAST:event_cmd_deleteallActionPerformed

    private void cmd_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_importActionPerformed
    if (pane_highertaxon.getSelectedIndex()==3){
        int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to CLASS?", "Import Class", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filename1 = f.getAbsolutePath();
            
            BufferedReader br = new BufferedReader(new FileReader(filename1));
            String line;
            while((line=br.readLine())!=null){
            String[]value=line.split(","); //seperator
            String sql = "INSERT INTO 'class' (classid, classname) values ('"+value[0]+"', '"+value[1]+"')";
            pst=conn.prepareStatement(sql);
            pst.executeUpdate();
            }
            br.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }

        Update_table_class();
    }
        
        //tab2
        if (pane_highertaxon.getSelectedIndex()==2){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to ORDER?", "Import Order", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                JFileChooser chooser = new JFileChooser();
                chooser.showOpenDialog(null);
                File f = chooser.getSelectedFile();
                String filename1 = f.getAbsolutePath();

                BufferedReader br = new BufferedReader(new FileReader(filename1));
                String line;
                while((line=br.readLine())!=null){
                String[]value=line.split(","); //seperator
                String sql = "INSERT INTO 'order' (orderid, ordername, classido) values ('"+value[0]+"', '"+value[1]+"', '"+value[2]+"')";
                pst=conn.prepareStatement(sql);
                pst.executeUpdate();
                }
                br.close();
                
                
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_order();
        }
        
        //Family tab 01
        if (pane_highertaxon.getSelectedIndex()==1){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to FAMILY?", "Import Family", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                JFileChooser chooser = new JFileChooser();
                chooser.showOpenDialog(null);
                File f = chooser.getSelectedFile();
                String filename1 = f.getAbsolutePath();

                BufferedReader br = new BufferedReader(new FileReader(filename1));
                String line;
                while((line=br.readLine())!=null){
                String[]value=line.split(","); //seperator
                String sql = "INSERT INTO 'family' (familyid, orderidf, familyname) values ('"+value[0]+"', '"+value[1]+"', '"+value[2]+"')";
                pst=conn.prepareStatement(sql);
                pst.executeUpdate();
                }
                br.close();
                
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_family();
        }
        //Family tab 00
        if (pane_highertaxon.getSelectedIndex()==0){
            int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to GENUS?", "Import Genus", JOptionPane.YES_NO_OPTION);
            if (p==0){
            try{
                JFileChooser chooser = new JFileChooser();
                chooser.showOpenDialog(null);
                File f = chooser.getSelectedFile();
                String filename1 = f.getAbsolutePath();

                BufferedReader br = new BufferedReader(new FileReader(filename1));
                String line;
                while((line=br.readLine())!=null){
                String[]value=line.split(","); //seperator
                String sql = "INSERT INTO 'genus' (genusid, familyidg, genusname) values ('"+value[0]+"', '"+value[1]+"', '"+value[2]+"')";
                pst=conn.prepareStatement(sql);
                pst.executeUpdate();
                }
                br.close();
                
            }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                    finally {try {rs.close();pst.close();}catch (Exception e){}}
            }
            
            Update_table_genus();
        }    
    }//GEN-LAST:event_cmd_importActionPerformed

    private void cmd_exportcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportcsvActionPerformed
    //tab 03
    if (pane_highertaxon.getSelectedIndex()==3){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table Class to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT * FROM 'class' ORDER BY classid, classname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            //int row = 1;
            while(rs.next()) {
                fw.append(rs.getString("classid"));
                fw.append(',');
                fw.append(rs.getString("classname"));
                fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table CLASS was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
    }
        
        //tab2
    if (pane_highertaxon.getSelectedIndex()==2){
    JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table ORDER to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT orderid, ordername, classido FROM 'order' ORDER BY orderid, ordername ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            //int row = 1;
            while(rs.next()) {
                fw.append(rs.getString("orderid"));
                fw.append(',');
                fw.append(rs.getString("ordername"));
                fw.append(',');
                fw.append(rs.getString("classido"));
                fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table ORDER was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
    }
        
    //Family tab 01
    if (pane_highertaxon.getSelectedIndex()==1){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table FAMILY to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT familyid, orderidf, familyname FROM 'family' ORDER BY familyid, familyname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            //int row = 1;
            while(rs.next()) {
                fw.append(rs.getString("familyid"));
                fw.append(',');
                fw.append(rs.getString("orderidf"));
                fw.append(',');
                fw.append(rs.getString("familyname"));
                fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table FAMILY was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
    }
        //Family tab 00
    if (pane_highertaxon.getSelectedIndex()==0){
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table GENUS to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File are exist! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT genusid, familyidg, genusname FROM 'genus' ORDER BY genusid, genusname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            //int row = 1;
            while(rs.next()) {
                fw.append(rs.getString("genusid"));
                fw.append(',');
                fw.append(rs.getString("familyidg"));
                fw.append(',');
                fw.append(rs.getString("genusname"));
                fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table FAMILY was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
    }        
    }//GEN-LAST:event_cmd_exportcsvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(higherTaxon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(higherTaxon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(higherTaxon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(higherTaxon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new higherTaxon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_addnew;
    private javax.swing.JButton cmd_close1;
    private javax.swing.JButton cmd_delete;
    private javax.swing.JMenuItem cmd_deleteall;
    private javax.swing.JMenuItem cmd_export;
    private javax.swing.JMenuItem cmd_exportcsv;
    private javax.swing.JMenuItem cmd_import;
    private javax.swing.JButton cmd_save;
    private javax.swing.JMenu cmd_tool;
    private javax.swing.JButton cmd_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane pane_highertaxon;
    private javax.swing.JPanel panel_class;
    private javax.swing.JPanel panel_family;
    private javax.swing.JPanel panel_genus;
    private javax.swing.JPanel panel_order;
    private javax.swing.JPanel panel_phylum;
    private javax.swing.JTable table_class;
    private javax.swing.JTable table_family;
    private javax.swing.JTable table_genus;
    private javax.swing.JTable table_order;
    private javax.swing.JTextField txt_classid;
    private javax.swing.JTextField txt_classname;
    private javax.swing.JTextField txt_classorderid;
    private javax.swing.JTextField txt_classordername;
    private javax.swing.JTextField txt_familygenusid;
    private javax.swing.JTextField txt_familygenusname;
    private javax.swing.JTextField txt_familyid;
    private javax.swing.JTextField txt_familyname;
    private javax.swing.JTextField txt_genusid;
    private javax.swing.JTextField txt_genusname;
    private javax.swing.JTextField txt_orderfamilyid;
    private javax.swing.JTextField txt_orderfamilyname;
    private javax.swing.JTextField txt_orderid;
    private javax.swing.JTextField txt_ordername;
    // End of variables declaration//GEN-END:variables
}
