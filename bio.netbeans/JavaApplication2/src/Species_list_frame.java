import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
//import org.apache.poi.ss.usermodel.Row;
//import org.apache.poi.ss.usermodel.Sheet;
//import org.apache.poi.ss.usermodel.Workbook;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author TrinhDang
 */

public class Species_list_frame extends javax.swing.JFrame {
    Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst =null;
    /**
     * Creates new form Species_list_frame
     */
    public Species_list_frame() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        Update_table();
        setIcon();
    }

private void setIcon() {
        try {
        String decodedPath = URLDecoder.decode(javaconnect.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
        String purl = decodedPath.substring(0, decodedPath.lastIndexOf("/"));
        String Url = purl+"/Image/iconimage.png";
        setIconImage(Toolkit.getDefaultToolkit().getImage(Url));

        } catch (UnsupportedEncodingException e){
            JOptionPane.showMessageDialog(null, e);}
    }   
    
private void Update_table(){
    
    String sql ="SELECT 'species'.speciesid AS 'ID', 'species'.spname AS 'Species Name', 'species'.author FROM 'species' WHERE 'species'.countsp ='FALSE' ORDER BY 'species'.spname";
    String sql1="SELECT count(speciesid) FROM 'species' WHERE 'species'.countsp ='FALSE' ";
    try{
       
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    table_species_list.setModel(DbUtils.resultSetToTableModel(rs));
    table_species_list.setAutoResizeMode(table_species_list.AUTO_RESIZE_OFF);
    table_species_list.getColumnModel().getColumn(0).setPreferredWidth(70);
    table_species_list.getColumnModel().getColumn(1).setPreferredWidth(176);
    table_species_list.getColumnModel().getColumn(2).setPreferredWidth(160);
            }
    catch (Exception e){JOptionPane.showMessageDialog(null, e);}
    finally {try {rs.close(); pst.close();}catch (Exception e){}}
    
    try {
           pst =conn.prepareStatement(sql1);
           rs =pst.executeQuery();
           
           if (rs.next()){
               String count = rs.getString("count(speciesid)");
               label_total.setText("Total Number of Species:"+count);
           }
        }catch (Exception e){JOptionPane.showMessageDialog(null, e); }
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    
    
}
//field combobox
private void Fildcombo_genus(){
    
try {
    String sql ="SELECT genusname FROM 'genus' ORDER BY genusname ";
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    //combo_genus.addItem("");
    combo_genus.setEditable(true);
    while(rs.next()){
        String name =rs.getString("genusname");
        combo_genus.addItem(name);}
        AutoCompleteDecorator.decorate(this.combo_genus);
    }
    catch (Exception e){JOptionPane.showMessageDialog(null, e);}
    finally {try {rs.close();pst.close();}catch (Exception e){}}


}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_description = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_species = new javax.swing.JTextField();
        check_aus = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        check_afr = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        check_nea = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        txt_spid = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        check_ori = new javax.swing.JCheckBox();
        txt_note = new javax.swing.JTextField();
        check_neo = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        check_pal = new javax.swing.JCheckBox();
        check_pac = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        txt_author = new javax.swing.JTextField();
        check_countspecies = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        check_ant = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        combo_genus = new javax.swing.JComboBox();
        mainlable = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        label_total = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_species_list = new javax.swing.JTable();
        txt_search = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cmd_refresh = new javax.swing.JMenuItem();
        cmd_showcountsp = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        cmdb_addnew = new javax.swing.JMenuItem();
        cmdb_save = new javax.swing.JMenuItem();
        cmdb_update = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        cmdb_delete = new javax.swing.JMenuItem();
        cmdb_deleteal = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        cmdb_export = new javax.swing.JMenuItem();
        cmd_exportcsv = new javax.swing.JMenuItem();
        cmdb_import = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        cmd_checklist = new javax.swing.JMenuItem();
        cmd_sortbygenus = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Add New Species");
        setIconImages(null);

        txt_description.setColumns(5);
        txt_description.setRows(2);
        txt_description.setTabSize(4);
        jScrollPane2.setViewportView(txt_description);

        jLabel1.setText("Species ID:");

        jLabel4.setText("Author:");

        check_aus.setText("Aus");

        jLabel2.setText("Genus:");

        check_afr.setText("Afr");

        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Description:");

        jLabel5.setText("W-Distribution");

        check_nea.setText("Nea");

        jButton1.setText("Add New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        check_ori.setText("Ori");

        check_neo.setText("Neo");

        jLabel3.setText("Species:");

        check_pal.setText("Pal");

        check_pac.setText("Pac");

        jLabel7.setText("Note:");

        check_countspecies.setText("FALSE");
        check_countspecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_countspeciesActionPerformed(evt);
            }
        });

        jLabel8.setText("Count Species:");

        check_ant.setText("Ant");

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        combo_genus.setEditable(true);
        combo_genus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_species, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_spid)
                            .addComponent(txt_author)
                            .addComponent(combo_genus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(122, 122, 122))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(check_nea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_pal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_neo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(check_pac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_afr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)
                                .addComponent(check_aus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(check_ori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addComponent(check_ant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(133, 133, 133))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(check_countspecies, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_note, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_spid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_genus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_pal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_afr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_aus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_ori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_nea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_neo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_pac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(check_ant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                    .addComponent(txt_note, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(check_countspecies))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        mainlable.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        mainlable.setText("Species Information");

        label_total.setText("Total Number of Species:");

        table_species_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_species_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_species_listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_species_list);

        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txt_search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_total, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_total)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jMenu1.setText("File");

        cmd_refresh.setText("Refresh Table");
        cmd_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_refreshActionPerformed(evt);
            }
        });
        jMenu1.add(cmd_refresh);

        cmd_showcountsp.setText("Show Count Species");
        cmd_showcountsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_showcountspActionPerformed(evt);
            }
        });
        jMenu1.add(cmd_showcountsp);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Close");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Cut");
        jMenu2.add(jMenuItem4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Copy");
        jMenu2.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Paste");
        jMenu2.add(jMenuItem3);
        jMenu2.add(jSeparator2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Undo");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Species");

        cmdb_addnew.setText("Add New Species");
        cmdb_addnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdb_addnewActionPerformed(evt);
            }
        });
        jMenu3.add(cmdb_addnew);

        cmdb_save.setText("Save Species");
        jMenu3.add(cmdb_save);

        cmdb_update.setText("Update Species");
        jMenu3.add(cmdb_update);
        jMenu3.add(jSeparator3);

        cmdb_delete.setText("Delete Species");
        jMenu3.add(cmdb_delete);

        cmdb_deleteal.setText("Delete all");
        cmdb_deleteal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdb_deletealActionPerformed(evt);
            }
        });
        jMenu3.add(cmdb_deleteal);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Tool");

        cmdb_export.setText("Export to .exl");
        cmdb_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdb_exportActionPerformed(evt);
            }
        });
        jMenu4.add(cmdb_export);

        cmd_exportcsv.setText("Export tbl to .csv");
        cmd_exportcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportcsvActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_exportcsv);

        cmdb_import.setText("Import from .csv");
        cmdb_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdb_importActionPerformed(evt);
            }
        });
        jMenu4.add(cmdb_import);
        jMenu4.add(jSeparator4);

        cmd_checklist.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        cmd_checklist.setText("Check list");
        cmd_checklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_checklistActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_checklist);

        cmd_sortbygenus.setText("Sort by Genus");
        cmd_sortbygenus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_sortbygenusActionPerformed(evt);
            }
        });
        jMenu4.add(cmd_sortbygenus);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem6.setText("About");
        jMenu5.add(jMenuItem6);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainlable)
                            .addComponent(jSeparator1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(27, 27, 27)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(mainlable))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 96, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_species_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_species_listMouseClicked
        try{
        int row=table_species_list.getSelectedRow();
        String Table_click=(table_species_list.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT * FROM Species WHERE species.speciesID ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                String add1 =rs.getString("speciesID");
                txt_spid.setText(add1);
                String add2 =rs.getString("genus");
                combo_genus.setSelectedItem(add2);
                String add3 =rs.getString("species");
                txt_species.setText(add3);
                String add4 =rs.getString("author");
                txt_author.setText(add4);
                String add5 =rs.getString("describe");
                txt_description.setText(add5);
                String add6 =rs.getString("notes");
                txt_note.setText(add6);   
                //String add_count =rs.getString("CountSp"); //Hiển thị loài đếm
                    //if(add_count.length()==4){check_countspecies.setSelected(true);
                    //}else{check_countspecies.setSelected(false);}
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        try{
        int row=table_species_list.getSelectedRow();
        String Table_click=(table_species_list.getModel().getValueAt(row, 0).toString());
            
            String sql="SELECT * FROM WDistribution WHERE WDistribution.speciesID ='"+Table_click+"'   ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            
            if(rs.next()){
                if(rs.getString("Palaearctic").equalsIgnoreCase("true")){check_pal.setSelected(true);
                    }else{check_pal.setSelected(false);}
                if(rs.getString("Afrotropical").equalsIgnoreCase("true")){check_afr.setSelected(true);
                    }else{check_afr.setSelected(false);}
                if(rs.getString("Australian").equalsIgnoreCase("true")){check_aus.setSelected(true);
                    }else{check_aus.setSelected(false);}
                if(rs.getString("Oriental").equalsIgnoreCase("true")){check_ori.setSelected(true);
                    }else{check_ori.setSelected(false);}
                if(rs.getString("Nearctic").equalsIgnoreCase("true")){check_nea.setSelected(true);
                    }else{check_nea.setSelected(false);}
                if(rs.getString("Neotropic").equalsIgnoreCase("true")){check_neo.setSelected(true);
                    }else{check_neo.setSelected(false);}
                if(rs.getString("Pacific").equalsIgnoreCase("true")){check_pac.setSelected(true);
                    }else{check_pac.setSelected(false);}
                if(rs.getString("Antarctic").equalsIgnoreCase("true")){check_ant.setSelected(true);
                    }else{check_ant.setSelected(false);}
            }
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        
    }//GEN-LAST:event_table_species_listMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            String sql= "SELECT * FROM Species ORDER BY SpeciesID DESC LIMIT 1";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if (rs.next()){
            String res = rs.getString("SpeciesID").substring(1);
            int coa = Integer.parseInt(res);
            String coas = String.valueOf(coa+1);
            if(coas.length()==1){
                String txt = "R000" + coas;
                txt_spid.setText(txt);
            }else{
                if(coas.length()==2){
                String txt = "R00" + coas;
                txt_spid.setText(txt);
                }else{
                        if(coas.length()==3){
                        String txt = "R0" + coas;
                        txt_spid.setText(txt);
                        }else{
                            String txt = "R" + coas;
                            txt_spid.setText(txt);
                        }
                    }
                }
            
            }
            
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        combo_genus.setSelectedItem("");
        txt_species.setText("");
        txt_author.setText("");
        txt_description.setText("");
        txt_note.setText("");
        check_pal.setSelected(false);
        check_afr.setSelected(false);
        check_aus.setSelected(false);
        check_ori.setSelected(false);
        check_nea.setSelected(false);
        check_neo.setSelected(false);
        check_pac.setSelected(false);
        check_ant.setSelected(false);
        
    Fildcombo_genus();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            String sql ="INSERT INTO Species (speciesID, genus, species, author, describe, notes, CountSp, SpName) values (?,?,?,?,?,?,?,?)";

                pst =conn.prepareStatement(sql);
                pst.setString(1, txt_spid.getText());
                pst.setString(2,(String)combo_genus.getSelectedItem());
                pst.setString(3, txt_species.getText());
                pst.setString(4, txt_author.getText());
                pst.setString(5, txt_description.getText());
                pst.setString(6, txt_note.getText());
                pst.setString(7, check_countspecies.getText());
                pst.setString(8, (String)combo_genus.getSelectedItem()+ " " +txt_species.getText());
                pst.execute();

            JOptionPane.showMessageDialog(null, "One new species was added");

        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (Exception e){ }}
        
//add distribution
        try{
           String txt_pal, txt_afr, txt_aus,txt_ori, txt_nea, txt_neo, txt_pac, txt_ant;
           String sql2 ="INSERT INTO WDistribution (SpeciesID, palaearctic, afrotropical, australian, oriental, nearctic, neotropic, pacific, antarctic) values (?,?,?,?,?,?,?,?,?)";
             pst =conn.prepareStatement(sql2);
             pst.setString(1, txt_spid.getText());
             
             if(check_pal.isSelected()==true){txt_pal="TRUE";}else {txt_pal="FALSE";}
             pst.setString(2,txt_pal);
             
             if(check_afr.isSelected()==true){txt_afr="TRUE";}else {txt_afr="FALSE";}
             pst.setString(3,txt_afr);
             
             if(check_aus.isSelected()==true){txt_aus="TRUE";}else {txt_aus="FALSE";}
             pst.setString(4,txt_aus);
             
             if(check_ori.isSelected()==true){txt_ori="TRUE";}else {txt_ori="FALSE";}
             pst.setString(5,txt_ori);
             
             if(check_nea.isSelected()==true){txt_nea="TRUE";}else {txt_nea="FALSE";}
             pst.setString(6,txt_nea);
             
             if(check_neo.isSelected()==true){txt_neo="TRUE";}else {txt_neo="FALSE";}
             pst.setString(7,txt_neo);
             
             if(check_pac.isSelected()==true){txt_pac="TRUE";}else {txt_pac="FALSE";}
             pst.setString(8,txt_pac);
             
             if(check_ant.isSelected()==true){txt_ant="TRUE";}else {txt_ant="FALSE";}
             pst.setString(9,txt_ant);
             
             pst.execute();

            JOptionPane.showMessageDialog(null, "The distribution of this species are also added");

        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (Exception e){ }}
        
        
        Update_table();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//update species table
        try{
            String spid=txt_spid.getText();
            String genus =(String)combo_genus.getSelectedItem();
            String species =txt_species.getText();
            String author =txt_author.getText();
            String description =txt_description.getText();
            String note =txt_note.getText();
            String countspecies =check_countspecies.getText();
            String fullname = genus +" "+ species;
            
            String sql ="update Species set speciesID ='"+spid+"', genus ='"+genus+"', species='"+species+"', author ='"+author+"', describe='"+description+"', notes='"+note+"', CountSp='"+countspecies+"', SpName='"+fullname+"' WHERE speciesID ='"+spid+"'  ";
            pst=conn.prepareStatement(sql);
            pst.execute();
        
        //update wDistribuion
            String txt_pal = null, txt_afr = null, txt_aus=null,txt_ori=null, txt_nea=null, txt_neo=null, txt_pac=null, txt_ant=null;
            //String spid2=txt_spid.getText();
            if(check_pal.isSelected()==true){txt_pal="TRUE";}else {txt_pal="FALSE";}
            if(check_afr.isSelected()==true){txt_afr="TRUE";}else {txt_afr="FALSE";}
            if(check_aus.isSelected()==true){txt_aus="TRUE";}else {txt_aus="FALSE";}
            if(check_ori.isSelected()==true){txt_ori="TRUE";}else {txt_ori="FALSE";}
            if(check_nea.isSelected()==true){txt_nea="TRUE";}else {txt_nea="FALSE";}
            if(check_neo.isSelected()==true){txt_neo="TRUE";}else {txt_neo="FALSE";}
            if(check_pac.isSelected()==true){txt_pac="TRUE";}else {txt_pac="FALSE";}
            if(check_ant.isSelected()==true){txt_ant="TRUE";}else {txt_ant="FALSE";}

            String sql2 ="UPDATE WDistribution SET speciesID ='"+spid+"', Palaearctic ='"+txt_pal+"', Afrotropical='"+txt_afr+"', Australian ='"+txt_aus+"', Oriental='"+txt_ori+"', Nearctic ='"+txt_nea+"', Neotropic = '"+txt_neo+"', Pacific = '"+txt_pac+"',Antarctic = '"+txt_ant+"' WHERE speciesID ='"+spid+"'  ";
            pst=conn.prepareStatement(sql2);
            pst.execute();
            
            
            JOptionPane.showMessageDialog(null, "Updated");
        
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        Update_table();
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void check_countspeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_countspeciesActionPerformed
        if (check_countspecies.isSelected()==true){
        check_countspecies.setText("TRUE");
        }else {check_countspecies.setText("FALSE");}
    }//GEN-LAST:event_check_countspeciesActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE this data?", "Delete", JOptionPane.YES_NO_OPTION);
        if (p==0){
        //String sql="DELETE from Species where speciesID = ?";
        try{
            String sql="DELETE from Species where speciesID = ?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, txt_spid.getText());
            pst.execute();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        try{
            String sql="DELETE from WDistribution where WDistribution.speciesID = ?";
            pst=conn.prepareStatement(sql);
            pst.setString(1, txt_spid.getText());
            pst.execute();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        Update_table();
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
        rs.close();
        pst.close();
        dispose();
        }catch (Exception e){}
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void cmdb_addnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdb_addnewActionPerformed
        try{
            String sql= "SELECT * FROM Species ORDER BY SpeciesID DESC LIMIT 1";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if (rs.next()){
            String res = rs.getString("SpeciesID").substring(1);
            int coa = Integer.parseInt(res);
            String coas = String.valueOf(coa+1);
            if(coas.length()==1){
                String txt = "R000" + coas;
                txt_spid.setText(txt);
            }else{
                if(coas.length()==2){
                String txt = "R00" + coas;
                txt_spid.setText(txt);
                }else{
                        if(coas.length()==3){
                        String txt = "R0" + coas;
                        txt_spid.setText(txt);
                        }else{
                            String txt = "R" + coas;
                            txt_spid.setText(txt);
                        }
                    }
                }
            
            }
            
        }catch(Exception e){ JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        
        txt_species.setText("");
        txt_author.setText("");
        txt_description.setText("");
        txt_note.setText("");
        check_pal.setSelected(false);
        check_afr.setSelected(false);
        check_aus.setSelected(false);
        check_ori.setSelected(false);
        check_nea.setSelected(false);
        check_neo.setSelected(false);
        check_pac.setSelected(false);
        check_ant.setSelected(false);
    }//GEN-LAST:event_cmdb_addnewActionPerformed

    private void cmdb_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdb_exportActionPerformed
        
    JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle("Export Species list to .xls file");
    int retval = chooser.showSaveDialog(null);
    File f = chooser.getSelectedFile();
    String outputDirPath=f.getAbsolutePath();
    
    if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File is existed! Do you want to over write?", "Over-write", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("SpeciesList");

            Row titlerow = personSheet.createRow(0);
            Cell nametitle = titlerow.createCell(0);
            nametitle.setCellValue("Species List Information");

            Row headerRow = personSheet.createRow(1);
                Cell ordername = headerRow.createCell(0);
                    ordername.setCellValue("Order Name");
                Cell familyname = headerRow.createCell(1);
                    familyname.setCellValue("Family Name");
                Cell genusname = headerRow.createCell(2);
                    genusname.setCellValue("Genus Name");
                Cell speciesid = headerRow.createCell(3);
                    speciesid.setCellValue("Species ID");
                Cell spname = headerRow.createCell(4);
                    spname.setCellValue("Species Name");
                Cell author = headerRow.createCell(5);
                    author.setCellValue("author");

            try{
            String sql = "SELECT 'order'.ordername, family.familyname, genus.genusname, "
                    + "species.speciesid, species.spname, species.author FROM 'species'  "
                    + "LEFT JOIN 'genus' On 'species'.genus = 'genus'.genusname "
                    + "LEFT JOIN 'family' ON 'genus'.familyidg = 'family'.familyid "
                    + "LEFT JOIN 'order' ON 'family'.orderidf = 'order'.orderid "
                    + "WHERE countsp ='FALSE' ORDER BY 'order'.ordername, family.familyname, genus.genusname ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 2;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);

                Cell orderCell = dataRow.createCell(0);
                    orderCell.setCellValue(rs.getString("ordername"));

                Cell familycell = dataRow.createCell(1);
                    familycell.setCellValue(rs.getString("familyname"));

                Cell genusCell = dataRow.createCell(2);
                    genusCell.setCellValue(rs.getString("genusname"));

                Cell speciesidCell = dataRow.createCell(3);
                    speciesidCell.setCellValue(rs.getString("speciesid"));

                Cell spnamecell = dataRow.createCell(4);
                    spnamecell.setCellValue(rs.getString("spname"));

                Cell authorCell = dataRow.createCell(5);
                    authorCell.setCellValue(rs.getString("author"));

                row = row + 1;
            }


            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "The Species List was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }
    }//GEN-LAST:event_cmdb_exportActionPerformed

    private void cmd_checklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_checklistActionPerformed
       File file = new File("/home/trinhdangmau/Documents/checklist.pdf");
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(Main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmd_checklistActionPerformed

    private void cmd_exportcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportcsvActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export table Species to .csv file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        if (retval==JFileChooser.APPROVE_OPTION){
        if(f.exists()) {
            int p =JOptionPane.showConfirmDialog(null, "File is existed! Do you want to over write?", "Delete", JOptionPane.YES_NO_OPTION);
            if (p==1){
            return;
            }
        }
            try{
            FileWriter fw = new FileWriter(outputDirPath);
            String sql = " SELECT * FROM 'species' ORDER BY genus, species ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            while(rs.next()) {
                fw.append('"'); fw.append(rs.getString("SpeciesID")); fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Genus"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Species"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Author"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Literature"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Describe"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("InternetSource"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("CountSp"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("Notes"));fw.append('"'); fw.append(',');
                fw.append('"');fw.append(rs.getString("SpName"));fw.append('"'); fw.append('\n');
            }
            fw.flush();
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Table species was exported to " + outputDirPath);
            } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
        
        }
        Update_table();
    }//GEN-LAST:event_cmd_exportcsvActionPerformed

    private void cmdb_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdb_importActionPerformed
        int p =JOptionPane.showConfirmDialog(null, "Do you want to IMPORT data to Species?", "Import Species", JOptionPane.YES_NO_OPTION);
        if (p==0){
        try{
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filename1 = f.getAbsolutePath();
            
            BufferedReader br = new BufferedReader(new FileReader(filename1));
            String line;

            while((line = br.readLine())!=null){
            line = line.substring(1, line.length() - 1);
            line=line.replace("null", "");
            String[]value=line.split("\",\""); //seperator
            String sql = "INSERT INTO 'Species' (SpeciesID, Genus, Species, Author, Literature, Describe, InternetSource, CountSp, Notes, SpName) "
                    + "values ('"+value[0]+"', '"+value[1]+"', '"+value[2]+"', '"+value[3]+"', '"+value[4]+"', '"+value[5]+"', '"+value[6]+"', '"+value[7]+"', '"+value[8]+"', '"+value[9]+"')";
            pst=conn.prepareStatement(sql);
            pst.executeUpdate();
            }
            br.close();
        }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
                finally {try {rs.close();pst.close();}catch (Exception e){}}
        }

        Update_table();
    }//GEN-LAST:event_cmdb_importActionPerformed

    private void cmdb_deletealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdb_deletealActionPerformed
    int p =JOptionPane.showConfirmDialog(null, "Do you want to DELETE ALL data?", "Delete Species", JOptionPane.YES_NO_OPTION);
    if (p==0){
    try{
        String sql="DELETE FROM 'species'";
        pst=conn.prepareStatement(sql);
        pst.execute();
    }catch(Exception e){JOptionPane.showMessageDialog(null, e);}
            finally {try {rs.close();pst.close();}catch (Exception e){}}
    }

    Update_table();
    }//GEN-LAST:event_cmdb_deletealActionPerformed

    private void cmd_sortbygenusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_sortbygenusActionPerformed
                
    }//GEN-LAST:event_cmd_sortbygenusActionPerformed

    private void cmd_showcountspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_showcountspActionPerformed
    String sql ="SELECT 'species'.speciesid AS 'ID', 'species'.spname AS 'Species Name', 'species'.author FROM 'species' ORDER BY 'species'.spname";
    String sql1="SELECT count(speciesid) FROM 'species'  ";
    try{
       
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    table_species_list.setModel(DbUtils.resultSetToTableModel(rs));
    table_species_list.setAutoResizeMode(table_species_list.AUTO_RESIZE_OFF);
    table_species_list.getColumnModel().getColumn(0).setPreferredWidth(70);
    table_species_list.getColumnModel().getColumn(1).setPreferredWidth(176);
    table_species_list.getColumnModel().getColumn(2).setPreferredWidth(160);
            }
    catch (Exception e){JOptionPane.showMessageDialog(null, e);}
    finally {try {rs.close(); pst.close();}catch (Exception e){}}
    
    try {
           pst =conn.prepareStatement(sql1);
           rs =pst.executeQuery();
           
           if (rs.next()){
               String count = rs.getString("count(speciesid)");
               label_total.setText("Total Number of Species:"+count);
           }
        }catch (Exception e){JOptionPane.showMessageDialog(null, e); }
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_cmd_showcountspActionPerformed

    private void cmd_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_refreshActionPerformed
        Update_table();
    }//GEN-LAST:event_cmd_refreshActionPerformed

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
    
    String search = "%"+txt_search.getText() + "%";
    
    String sql ="SELECT 'species'.speciesid AS 'ID', 'species'.spname AS 'Species Name', 'species'.author FROM 'species' WHERE 'species'.spname LIKE '"+search+"' ORDER BY 'species'.spname";
    String sql1="SELECT count(speciesid) FROM 'species'WHERE 'species'.spname LIKE '"+search+"' ";
    try{
       
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    table_species_list.setModel(DbUtils.resultSetToTableModel(rs));
    table_species_list.setAutoResizeMode(table_species_list.AUTO_RESIZE_OFF);
    table_species_list.getColumnModel().getColumn(0).setPreferredWidth(70);
    table_species_list.getColumnModel().getColumn(1).setPreferredWidth(176);
    table_species_list.getColumnModel().getColumn(2).setPreferredWidth(160);
            }
    catch (Exception e){JOptionPane.showMessageDialog(null, e);}
    finally {try {rs.close(); pst.close();}catch (Exception e){}}
    
    try {
           pst =conn.prepareStatement(sql1);
           rs =pst.executeQuery();
           
           if (rs.next()){
               String count = rs.getString("count(speciesid)");
               label_total.setText("Total Number of Species:"+count);
           }
        }catch (Exception e){JOptionPane.showMessageDialog(null, e); }
            finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }//GEN-LAST:event_txt_searchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Species_list_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Species_list_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Species_list_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Species_list_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Species_list_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox check_afr;
    private javax.swing.JCheckBox check_ant;
    private javax.swing.JCheckBox check_aus;
    private javax.swing.JCheckBox check_countspecies;
    private javax.swing.JCheckBox check_nea;
    private javax.swing.JCheckBox check_neo;
    private javax.swing.JCheckBox check_ori;
    private javax.swing.JCheckBox check_pac;
    private javax.swing.JCheckBox check_pal;
    private javax.swing.JMenuItem cmd_checklist;
    private javax.swing.JMenuItem cmd_exportcsv;
    private javax.swing.JMenuItem cmd_refresh;
    private javax.swing.JMenuItem cmd_showcountsp;
    private javax.swing.JMenuItem cmd_sortbygenus;
    private javax.swing.JMenuItem cmdb_addnew;
    private javax.swing.JMenuItem cmdb_delete;
    private javax.swing.JMenuItem cmdb_deleteal;
    private javax.swing.JMenuItem cmdb_export;
    private javax.swing.JMenuItem cmdb_import;
    private javax.swing.JMenuItem cmdb_save;
    private javax.swing.JMenuItem cmdb_update;
    private javax.swing.JComboBox combo_genus;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel label_total;
    private javax.swing.JLabel mainlable;
    private javax.swing.JTable table_species_list;
    private javax.swing.JTextField txt_author;
    private javax.swing.JTextArea txt_description;
    private javax.swing.JTextField txt_note;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_species;
    private javax.swing.JTextField txt_spid;
    // End of variables declaration//GEN-END:variables

   
}
