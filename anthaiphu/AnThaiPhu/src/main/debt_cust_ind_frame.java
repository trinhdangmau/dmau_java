/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Toolkit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static main.function.fromdate;
import static main.function.debt_date;
import static main.function.lc2;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPatriarch;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author dmautrinh
 */
public class debt_cust_ind_frame extends javax.swing.JFrame {
    Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst =null;
    /**
     * Creates new form debt_cust_ind_frame
     */
    public debt_cust_ind_frame() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        setIcon();
    }

    private void setIcon() {
        String purl = lc2();
        String Url = purl+"/database/logo90.png";
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(Url));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmd_go = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_debt_cust_ind = new javax.swing.JTable();
        cmd_go2 = new javax.swing.JButton();
        cmd_close = new javax.swing.JButton();
        cmd_print = new javax.swing.JButton();
        cmd_export = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        menu_help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Công nợ khách hàng");

        jLabel1.setText("Công nợ THÁNG: ");

        combo_month_ind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        combo_month_ind.setToolTipText("Lựa chọn tháng công nợ");

        cmd_go.setText("Duyệt");
        cmd_go.setToolTipText("Hiển thị công nợ khách hàng trong tháng");
        cmd_go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_goActionPerformed(evt);
            }
        });

        combo_years_ind.setMaximumRowCount(4);
        combo_years_ind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));
        combo_years_ind.setSelectedIndex(2);
        combo_years_ind.setToolTipText("Lựa chọn năm công nợ");

        combo_name_cust_ind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        combo_name_cust_ind.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_name_cust_indItemStateChanged(evt);
            }
        });
        combo_name_cust_ind.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                combo_name_cust_indPropertyChange(evt);
            }
        });

        jLabel2.setText("Tên Khách Hàng: ");

        table_debt_cust_ind.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table_debt_cust_ind);

        cmd_go2.setText("Duyệt");
        cmd_go2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_go2ActionPerformed(evt);
            }
        });

        cmd_close.setText("Close");
        cmd_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_closeActionPerformed(evt);
            }
        });

        cmd_print.setText("Print");
        cmd_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_printActionPerformed(evt);
            }
        });

        cmd_export.setText("Export");
        cmd_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_exportActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tools");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Advance");
        jMenuBar1.add(jMenu4);

        menu_help.setText("Help");
        jMenuBar1.add(menu_help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(combo_month_ind, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(combo_years_ind, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(combo_name_cust_ind, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmd_go, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(cmd_go2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 278, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmd_export, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmd_print, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmd_close, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_month_ind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmd_go)
                    .addComponent(combo_years_ind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_name_cust_ind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmd_go2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_close)
                    .addComponent(cmd_print)
                    .addComponent(cmd_export))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Fildcombo_name_cust(){
        combo_name_cust_ind.removeAllItems();
        try {
            String date = debt_date();
            String month = combo_month_ind.getSelectedItem().toString();
            String year = combo_years_ind.getSelectedItem().toString();
            String fromdate = fromdate(month, year);
            String todate = year+'-'+month+'-'+date;
            String sql ="SELECT name_cust FROM customer "
                    + " INNER JOIN export ON code_cust = code_cust_ex "
                    + " WHERE DATE(substr(date_ex,1,4)||'-'||substr(date_ex,6,2)||'-'||substr(date_ex,9,2)) "
                    + " BETWEEN DATE('"+fromdate+"') AND DATE('"+todate+"') GROUP BY name_cust ORDER BY name_cust ";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            //combo_genus.addItem("");
            combo_name_cust_ind.setEditable(true);
            while(rs.next()){
                String name =rs.getString("name_cust");
                combo_name_cust_ind.addItem(name);}
                AutoCompleteDecorator.decorate(debt_cust_ind_frame.combo_name_cust_ind);
            }
        catch (Exception e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close();pst.close();}catch (Exception e){}}
    }
    
    private void update_table_cust_ind(){
        String date = debt_date();
        String month = combo_month_ind.getSelectedItem().toString();
        String year = combo_years_ind.getSelectedItem().toString();
        String fromdate = fromdate(month, year);
        String todate = year+'-'+month+'-'+date;
        String name_cust = combo_name_cust_ind.getSelectedItem().toString();
        try{
            String sql = "SELECT code_ex AS  'Ma PX', "
                    + " name_prod AS 'Tên SP', date_ex AS 'Ngày xuất', "
                    + " specification_exdt AS 'Quy cách', no_exdt AS 'No.', weight_exdt AS 'Trọng lượng', "
                    + " unit_exdt AS 'Đơn vị',price_exdt AS 'Đơn giá', monetize_exdt AS 'Thành tiền' "
                    + " FROM export INNER JOIN customer ON code_cust_ex = code_cust  "
                    + " INNER JOIN export_detail ON code_ex = code_ex_exdt "
                    + " INNER JOIN product_information ON code_prod_exdt = code_prod "
                    + " WHERE DATE(substr(date_ex,1,4)||'-'||substr(date_ex,6,2)||'-'||substr(date_ex,9,2)) "
                    + " BETWEEN DATE('"+fromdate+"') AND DATE('"+todate+"') AND name_cust = '"+name_cust+"' ORDER BY code_ex";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_debt_cust_ind.setModel(DbUtils.resultSetToTableModel(rs));
            table_debt_cust_ind.getColumnModel().getColumn(0).setPreferredWidth(90);
            table_debt_cust_ind.getColumnModel().getColumn(1).setPreferredWidth(60);
            table_debt_cust_ind.getColumnModel().getColumn(4).setPreferredWidth(40);
            
        }catch (Exception e){JOptionPane.showMessageDialog(null, e);}
        finally {try {rs.close(); pst.close();}catch (Exception e){}}
    }
    
    private void export_to_xls(String name_cust_out, String outputDirPath){
        

        try{
            /////String require for sql
        String date = debt_date();
        String month = combo_month_ind.getSelectedItem().toString();
        String year = combo_years_ind.getSelectedItem().toString();
        String fromdate = fromdate(month, year);
        String todate = year+'-'+month+'-'+date;
        String name_cust = combo_name_cust_ind.getSelectedItem().toString();

        //start to create work book
        Workbook wb = new HSSFWorkbook();
        Sheet personSheet = wb.createSheet(name_cust_out + "_"+month);
        personSheet.setColumnWidth(9, 3000);
        personSheet.setColumnWidth(1, 3200);
        personSheet.setColumnWidth(2, 3000);
        personSheet.setColumnWidth(0, 1000);
        personSheet.setColumnWidth(5, 1200);
        personSheet.setColumnWidth(6, 3000);
        personSheet.setColumnWidth(7, 1200);
        //create font style

        HSSFFont font = (HSSFFont) wb.createFont();
        font.setColor(HSSFFont.COLOR_NORMAL);
        font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); font.setFontHeightInPoints((short) 14);
        HSSFCellStyle cellStyle= (HSSFCellStyle) wb.createCellStyle();
        cellStyle.setFont(font);
        //fonttitle
        HSSFFont font_tt = (HSSFFont) wb.createFont();
        font_tt.setColor(HSSFFont.COLOR_NORMAL);
        font_tt.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); font_tt.setFontHeightInPoints((short) 12);
        HSSFCellStyle cell_tt_Style= (HSSFCellStyle) wb.createCellStyle();
        cell_tt_Style.setFont(font_tt);
        //font_b
        HSSFFont font_b = (HSSFFont) wb.createFont();
        font_b.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            //HSSFCellStyle cell_b= (HSSFCellStyle) wb.createCellStyle();
            //cell_b.setFont(font_b);
        //cell number style 
        CellStyle cellnumberStyle = wb.createCellStyle();
        cellnumberStyle.setDataFormat(wb.getCreationHelper().createDataFormat().getFormat("#,##0_);(#,##0)"));
        cellnumberStyle.setBorderBottom(CellStyle.BORDER_DASHED);
        cellnumberStyle.setBorderRight(CellStyle.BORDER_THIN);
        cellnumberStyle.setBorderLeft(CellStyle.BORDER_THIN);
        cellnumberStyle.setVerticalAlignment(CellStyle.VERTICAL_TOP);
        //cell date style  MM/DD/YY
        CellStyle celldateStyle = wb.createCellStyle();
        celldateStyle.setDataFormat(wb.getCreationHelper().createDataFormat().getFormat("DD/MM/YY"));
        celldateStyle.setBorderBottom(CellStyle.BORDER_DASHED);
        celldateStyle.setBorderRight(CellStyle.BORDER_THIN);
        celldateStyle.setBorderLeft(CellStyle.BORDER_THIN);
        celldateStyle.setVerticalAlignment(CellStyle.VERTICAL_TOP);
        //cell header style with boder
        CellStyle style_header = wb.createCellStyle();
        style_header.setBorderBottom(CellStyle.BORDER_THIN); //style_header.setBottomBorderColor(IndexedColors.BLACK.getIndex());
        style_header.setBorderLeft(CellStyle.BORDER_THIN);
        style_header.setBorderRight(CellStyle.BORDER_THIN);
        style_header.setBorderTop(CellStyle.BORDER_THIN);
        style_header.setVerticalAlignment(CellStyle.VERTICAL_TOP);
        style_header.setFont(font_b);
        
        //nomal cell boder
        CellStyle style_nomal = wb.createCellStyle();
        style_nomal.setBorderBottom(CellStyle.BORDER_DASHED);
        style_nomal.setBorderRight(CellStyle.BORDER_THIN);
        style_nomal.setBorderLeft(CellStyle.BORDER_THIN);
        style_nomal.setVerticalAlignment(CellStyle.VERTICAL_TOP);
        
        // insert image
        String purl = lc2();
        FileInputStream fis=new FileInputStream(purl + "/database/logo90.png");
        ByteArrayOutputStream img_bytes=new ByteArrayOutputStream();  
        int b;     
        while((b=fis.read())!=-1)  
        img_bytes.write(b);  
        fis.close();
        
        HSSFClientAnchor anchor = new HSSFClientAnchor();  
        int col1=0,row1=0;       
        //HSSFClientAnchor object mainly sets the excel cell location where   
        //the image needs to be inserted  
        //(col1, row1, x1, y1, col2, row2, x2, y2)     
        anchor.setAnchor((short)col1, row1, 230, 0,(short) 1, 3, 700, 0);  
        anchor.setAnchorType(2);     
        int index=wb.addPicture(img_bytes.toByteArray(),HSSFWorkbook.PICTURE_TYPE_JPEG);
        HSSFPatriarch patriarch=(HSSFPatriarch) personSheet.createDrawingPatriarch();  
        //Creating picture with anchor and index information  
        patriarch.createPicture(anchor,index);  
       
        // company name
        Row titlerow = personSheet.createRow(0);
        titlerow.setHeightInPoints((short) 26);
        Cell nametitle = titlerow.createCell(2);
        nametitle.setCellStyle(cellStyle);
        nametitle.setCellValue("CÔNG TY TNHH MTV AN THÁI PHÚ");

        //addre
        Row addrow = personSheet.createRow(1);       
        Cell nameadd = addrow.createCell(2);
        nameadd.setCellValue("ĐC: 30/14 Đường DDT743, Bình Phước, Bình Chuẩn, Thuận An, Bình Dương, Việt Nam");

        Row phonerow = personSheet.createRow(2);
        Cell namephone = phonerow.createCell(2);
        namephone.setCellValue("ĐT: +84 065 037 984 12");

        Row tt_row = personSheet.createRow(4);
        tt_row.setHeightInPoints((short) 16);
        Cell tt_cell = tt_row.createCell(2);
        tt_cell.setCellStyle(cell_tt_Style);
        tt_cell.setCellValue("BẢNG ĐỐI CHIẾU CÔNG NỢ THÁNG " + month);

        ///custommer information part
        Row cust1_row = personSheet.createRow(6);
        Cell cust1_cell1 = cust1_row.createCell(0); cust1_cell1.setCellValue("Tên khách hàng: ");
        Cell cust1_cell2 = cust1_row.createCell(2); cust1_cell2.setCellValue(name_cust);
        Cell cust1_cell3 = cust1_row.createCell(5); cust1_cell3.setCellValue("Ngày lập: ");
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); Date datecr = new Date();
        Cell cust1_cell4 = cust1_row.createCell(7); cust1_cell4.setCellValue(dateFormat.format(datecr));


        Row headerRow = personSheet.createRow(7);
            Cell tt = headerRow.createCell(0); tt.setCellStyle(style_header);tt.setCellValue("TT");
            Cell code_ex = headerRow.createCell(1); code_ex.setCellStyle(style_header); code_ex.setCellValue("Mã Px");
            Cell date_ex = headerRow.createCell(2); date_ex.setCellStyle(style_header); date_ex.setCellValue("Ngày xuất");
            Cell name_prod = headerRow.createCell(3); name_prod.setCellStyle(style_header); name_prod.setCellValue("Tên SP");
            Cell specification = headerRow.createCell(4);  specification.setCellStyle(style_header); specification.setCellValue("Quy cách");
            Cell no = headerRow.createCell(5);  no.setCellStyle(style_header); no.setCellValue("No.");
            Cell weight = headerRow.createCell(6); weight.setCellStyle(style_header); weight.setCellValue("Trọng lượng");
            Cell unit = headerRow.createCell(7); unit.setCellStyle(style_header); unit.setCellValue("Unit");
            Cell price = headerRow.createCell(8); price.setCellStyle(style_header); price.setCellValue("Đơn giá");
            Cell monetize = headerRow.createCell(9); monetize.setCellStyle(style_header); monetize.setCellValue("Thành tiền");
            //Cell user = headerRow.createCell(8); user.setCellValue("User");



            String sql = "SELECT * "
                + " FROM export INNER JOIN customer ON code_cust_ex = code_cust  "
                + " INNER JOIN export_detail ON code_ex = code_ex_exdt "
                + " INNER JOIN product_information ON code_prod_exdt = code_prod "
                + " WHERE DATE(substr(date_ex,1,4)||'-'||substr(date_ex,6,2)||'-'||substr(date_ex,9,2)) "
                + " BETWEEN DATE('"+fromdate+"') AND DATE('"+todate+"') AND name_cust = '"+name_cust+"' ORDER BY code_ex";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery(); 

            int row = 8;
            int auto_incre = 1;
            String tax = null;
            while(rs.next()) {
                Row dataRow = personSheet.createRow(row);

                Cell auto_increR = dataRow.createCell(0); auto_increR.setCellStyle(style_nomal);
                    auto_increR.setCellValue(auto_incre);

                Cell code_exCell = dataRow.createCell(1); code_exCell.setCellStyle(style_nomal);
                    code_exCell.setCellValue(rs.getString("code_ex"));
                Cell date_exCell = dataRow.createCell(2); date_exCell.setCellStyle(style_nomal);
                    String date_01 = rs.getString("date_ex");
                    DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    Date date_02 = format.parse(date_01);
                    date_exCell.setCellStyle(celldateStyle);
                    date_exCell.setCellValue(date_02);

                Cell name_prodCell = dataRow.createCell(3); name_prodCell.setCellStyle(style_nomal);
                    name_prodCell.setCellValue(rs.getString("name_prod"));
                Cell specification_exdtCell = dataRow.createCell(4); specification_exdtCell.setCellStyle(style_nomal);
                    specification_exdtCell.setCellValue(rs.getString("specification_exdt"));
                Cell no_exdtCell = dataRow.createCell(5); no_exdtCell.setCellStyle(style_nomal);
                    no_exdtCell.setCellStyle(cellnumberStyle);
                    no_exdtCell.setCellValue(Integer.parseInt(rs.getString("no_exdt")));
                Cell weight_exdtCell = dataRow.createCell(6); weight_exdtCell.setCellStyle(style_nomal);
                    weight_exdtCell.setCellStyle(cellnumberStyle);
                    weight_exdtCell.setCellValue(Integer.parseInt(rs.getString("weight_exdt")));
                Cell unit_cell = dataRow.createCell(7); unit_cell.setCellStyle(style_nomal);
                    unit_cell.setCellValue(rs.getString("unit_exdt"));
                Cell price_exdtCell = dataRow.createCell(8); price_exdtCell.setCellStyle(style_nomal);
                    price_exdtCell.setCellStyle(cellnumberStyle);
                    price_exdtCell.setCellValue(Integer.parseInt(rs.getString("price_exdt")));
                Cell monetize_exdtCell = dataRow.createCell(9); monetize_exdtCell.setCellStyle(style_nomal);
                    monetize_exdtCell.setCellStyle(cellnumberStyle);
                    //int moneti = ;
                    monetize_exdtCell.setCellValue(Integer.parseInt(rs.getString("monetize_exdt")));
                tax = rs.getString("tax_ex");
                row = row + 1;
                auto_incre = auto_incre +1;
            }
            
            /////summary cell part/////
            CellStyle style_sumary = wb.createCellStyle();
            style_sumary.setBorderTop(CellStyle.BORDER_THIN);
            style_sumary.setFont(font_b);
            //both style only
            CellStyle both = wb.createCellStyle(); both.setFont(font_b);
            //cell number style2
            CellStyle cellnumberStyle2 = wb.createCellStyle();
            cellnumberStyle2.setDataFormat(wb.getCreationHelper().createDataFormat().getFormat("#,##0_);(#,##0)"));
            cellnumberStyle2.setBorderTop(CellStyle.BORDER_THIN);
            //cellnumberStyle2.setBorderRight(CellStyle.BORDER_THIN);
            //cellnumberStyle2.setBorderLeft(CellStyle.BORDER_THIN);
            cellnumberStyle2.setVerticalAlignment(CellStyle.VERTICAL_TOP);
            cellnumberStyle2.setFont(font_b);
            
            //frist row
            Row sum_row = personSheet.createRow(row);
            sum_row.createCell(0).setCellValue("Thành tiền: ");
            for(int j = 0; j<10; j++) {sum_row.createCell(j+1); sum_row.getCell(j).setCellStyle(style_sumary);}
            String total2 = print_sumary(fromdate, todate, name_cust);
            Cell cell_total2 = sum_row.createCell(9); cell_total2.setCellStyle(cellnumberStyle2);
            cell_total2.setCellValue(Integer.parseInt(total2));
            
            //second row
            Row vat_row = personSheet.createRow(row+1);
            Cell vat_cell = vat_row.createCell(0); 
            vat_cell.setCellValue("Thuế GTGT ("+ tax +"%):"); vat_cell.setCellStyle(both);
            int totaln = Integer.parseInt(total2); int taxn = Integer.parseInt(tax);
            int taxtn = (taxn*totaln/100);
            Cell tax_tt = vat_row.createCell(9); tax_tt.setCellStyle(cellnumberStyle2);
            tax_tt.setCellValue(taxtn);
            
            Row paid_row = personSheet.createRow(row + 2); 
            Cell paid_cell = paid_row.createCell(0);
            paid_cell.setCellValue("Tổng thanh toán: "); paid_cell.setCellStyle(both);
             int paidns = totaln+taxtn;
            Cell paidn = paid_row.createCell(9); paidn.setCellStyle(cellnumberStyle2);
            paidn.setCellValue(paidns);
            //// the end
            Row end_row = personSheet.createRow(row+3);
            end_row.createCell(0).setCellValue(" ");
            for(int k = 0; k<10; k++) {end_row.createCell(k+1); end_row.getCell(k).setCellStyle(style_sumary);}
            
            /// sign part
            Row sign_row = personSheet.createRow(row+4);
            Cell sign1 = sign_row.createCell(5); sign1.setCellValue("Lập, Ngày ... tháng ... năm 20...");
            Row sign2_row = personSheet.createRow(row+5);
            Cell sign2 = sign2_row.createCell(1); sign2.setCellStyle(both);sign2.setCellValue("Người lập biểu");
            Cell sign3 = sign2_row.createCell(6); sign3.setCellStyle(both);sign3.setCellValue("Thủ trưởng đơn vị");
            
            
            FileOutputStream fileOut = new FileOutputStream(outputDirPath);
            wb.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Công nợ khách hàng đã được xuất tới " + outputDirPath);
        } catch(Exception e){JOptionPane.showMessageDialog(null, e);}
        finally { try { rs.close(); pst.close();}catch (Exception e){  } }
    }
    
    private void cmd_goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_goActionPerformed
        Fildcombo_name_cust();
    }//GEN-LAST:event_cmd_goActionPerformed

    private void combo_name_cust_indItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_name_cust_indItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_name_cust_indItemStateChanged

    private void cmd_go2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_go2ActionPerformed
        update_table_cust_ind();
    }//GEN-LAST:event_cmd_go2ActionPerformed

    private void combo_name_cust_indPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_combo_name_cust_indPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_name_cust_indPropertyChange

    private void cmd_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_closeActionPerformed
        try {rs.close();pst.close();dispose();}catch (Exception e){}
    }//GEN-LAST:event_cmd_closeActionPerformed
    
    private void cmd_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_printActionPerformed
        String date = debt_date();
        String month = combo_month_ind.getSelectedItem().toString();
        String year = combo_years_ind.getSelectedItem().toString();
        String fromdate = fromdate(month, year);
        String todate = year+'-'+month+'-'+date;
        String name_cust = combo_name_cust_ind.getSelectedItem().toString();
                
        try {
            JasperDesign jd=JRXmlLoader.load(getClass().getResourceAsStream("report_atp01.jrxml"));
            String sql = "SELECT * "
                    + " FROM export INNER JOIN customer ON code_cust_ex = code_cust  "
                    + " INNER JOIN export_detail ON code_ex = code_ex_exdt "
                    + " INNER JOIN product_information ON code_prod_exdt = code_prod "
                    + " WHERE DATE(substr(date_ex,1,4)||'-'||substr(date_ex,6,2)||'-'||substr(date_ex,9,2)) "
                    + " BETWEEN DATE('"+fromdate+"') AND DATE('"+todate+"') AND name_cust = '"+name_cust+"' ORDER BY code_ex";
            JRDesignQuery newQuery= new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);
            
            JasperReport jr=JasperCompileManager.compileReport(jd);
            JasperPrint jp=JasperFillManager.fillReport(jr, null, conn);
            JasperViewer jv = new JasperViewer(jp,false);
            jv.setVisible(true);
            //JasperViewer.viewReport(jp);
            
        } catch (JRException ex) {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmd_printActionPerformed

    private void cmd_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_exportActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Export Customer debt to .xls file");
        int retval = chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();
        String outputDirPath=f.getAbsolutePath();

        ////
        String name_cust_out = combo_name_cust_ind.getSelectedItem().toString();

        if (retval==JFileChooser.APPROVE_OPTION){
            if(f.exists()) {
                int p =JOptionPane.showConfirmDialog(null, "File này đã có! Bạn có muốn ghi đè lên file này k?", "Over-write", JOptionPane.YES_NO_OPTION);
                if (p==1){return;}
            }
            export_to_xls(name_cust_out, outputDirPath);
        }
    }//GEN-LAST:event_cmd_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(debt_cust_ind_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(debt_cust_ind_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(debt_cust_ind_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(debt_cust_ind_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new debt_cust_ind_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_close;
    private javax.swing.JButton cmd_export;
    private javax.swing.JButton cmd_go;
    private javax.swing.JButton cmd_go2;
    private javax.swing.JButton cmd_print;
    public static final javax.swing.JComboBox combo_month_ind = new javax.swing.JComboBox();
    public static final javax.swing.JComboBox combo_name_cust_ind = new javax.swing.JComboBox();
    public static final javax.swing.JComboBox combo_years_ind = new javax.swing.JComboBox();
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menu_help;
    private javax.swing.JTable table_debt_cust_ind;
    // End of variables declaration//GEN-END:variables

    private String print_sumary(String fromdate, String todate, String name_cust) {
        String total = "null";
        try {
            String sql = "SELECT sum(monetize_exdt) "
                    + " FROM export INNER JOIN customer ON code_cust_ex = code_cust  "
                    + " INNER JOIN export_detail ON code_ex = code_ex_exdt "
                    + " INNER JOIN product_information ON code_prod_exdt = code_prod "
                    + " WHERE DATE(substr(date_ex,1,4)||'-'||substr(date_ex,6,2)||'-'||substr(date_ex,9,2)) "
                    + " BETWEEN DATE('"+fromdate+"') AND DATE('"+todate+"') AND name_cust = '"+name_cust+"' ";
            pst=conn.prepareStatement(sql); 
            rs=pst.executeQuery();
            total = rs.getString("sum(monetize_exdt)");
            
        } catch (SQLException ex) {
            Logger.getLogger(debt_cust_ind_frame.class.getName()).log(Level.SEVERE, null, ex);
        }finally { try { rs.close(); pst.close();}catch (Exception e){  } }
        return(total);
    }
}
