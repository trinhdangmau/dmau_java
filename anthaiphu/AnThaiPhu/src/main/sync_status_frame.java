/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static main.function.lc2;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;


/**
 *
 * @author dmautrinh
 */
public class sync_status_frame extends javax.swing.JFrame {
    Connection conn=null;
    Connection connsy = null;
    ResultSet rs =null;
    PreparedStatement pst =null;
    PreparedStatement pst2 =null;
    /**
     * Creates new form sync_status_frame
     */
    public sync_status_frame() {
        initComponents();
        conn=javaconnect.ConnecrDb();
        connsy = javaconnect.Connect_sync();
        setIcon();
    }

    private void setIcon() {
        String purl = lc2();
        String Url = purl+"/database/logo90.png";
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(Url));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmd_sync = new javax.swing.JButton();
        cmd_upload_status = new javax.swing.JButton();
        cmd_copy = new javax.swing.JButton();
        cmd_close = new javax.swing.JButton();
        cmd_upload = new javax.swing.JButton();
        cmd_download = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sync status");

        cmd_sync.setText("Sync");
        cmd_sync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_syncActionPerformed(evt);
            }
        });

        cmd_upload_status.setText("Change");
        cmd_upload_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_upload_statusActionPerformed(evt);
            }
        });

        cmd_copy.setText("copy");
        cmd_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_copyActionPerformed(evt);
            }
        });

        cmd_close.setText(" Đóng");
        cmd_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_closeActionPerformed(evt);
            }
        });

        cmd_upload.setText("upload_database");
        cmd_upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_uploadActionPerformed(evt);
            }
        });

        cmd_download.setText("download_database");
        cmd_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_downloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_upload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmd_download))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_close, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmd_copy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmd_sync, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(cmd_upload_status)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(135, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_upload)
                    .addComponent(cmd_download))
                .addGap(18, 18, 18)
                .addComponent(cmd_copy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmd_sync)
                    .addComponent(cmd_upload_status)
                    .addComponent(cmd_close))
                .addGap(51, 51, 51))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    public void download_sync_status(){
        try {       
            //download file
            FTPClient client = new FTPClient();
            FileOutputStream fos = null;
            client.connect("ftp.anthaiphusteel.com", 21);
            client.login("dmautrinh@anthaiphusteel.com", "0905436189");
            client.enterLocalPassiveMode();
            client.setFileType(FTP.BINARY_FILE_TYPE);

            File filename = new File("status_sync.ini");
            String fileftp = "status_sync.ini";
            fos = new FileOutputStream(filename);

            boolean success = client.retrieveFile(fileftp, fos);
            fos.close();
            if (!success) {
                JOptionPane.showMessageDialog(null, filename.getName()+", Download fail...");
            }
            client.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(debt_cust_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void download_sync_database(){
        try {       
            //download file
            FTPClient client = new FTPClient();
            FileOutputStream fos = null;
            client.connect("ftp.anthaiphusteel.com", 21);
            client.login("dmautrinh@anthaiphusteel.com", "0905436189");
            client.enterLocalPassiveMode();
            client.setFileType(FTP.BINARY_FILE_TYPE);
            
            String purl = lc2();
            String Url = purl+"/database/sync.db";
            File filename = new File(Url);
            String fileftp = "sync.db";
            fos = new FileOutputStream(filename);

            boolean success = client.retrieveFile(fileftp, fos);
            fos.close();
            if (!success) {
                JOptionPane.showMessageDialog(null, filename.getName()+", Download fail...");
            }
            client.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(debt_cust_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void upload_sync_status(){
    try {
        //upload file
        FTPClient client = new FTPClient();
        FileInputStream fos = null;
        client.connect("ftp.anthaiphusteel.com", 21);
        client.login("dmautrinh@anthaiphusteel.com", "0905436189");
        client.enterLocalPassiveMode();
        client.setFileType(FTP.BINARY_FILE_TYPE);

        File filename = new File("status_sync.ini");
        String fileftp = "status_sync.ini";
        fos = new FileInputStream(filename);

        boolean success = client.storeFile(fileftp, fos);
        fos.close();
        if (!success) {
            JOptionPane.showMessageDialog(null, filename.getName()+", UPload fail...");
        }
        client.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(debt_cust_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void upload_sync_database(String type_database){
    try {
            //upload file
            FTPClient client = new FTPClient();
            FileInputStream fos = null;
            client.connect("ftp.anthaiphusteel.com", 21);
            client.login("dmautrinh@anthaiphusteel.com", "0905436189");
            client.enterLocalPassiveMode();
            client.setFileType(FTP.BINARY_FILE_TYPE);
            
            String purl = lc2();
            String Url = purl+"/database/"+type_database+".db";
            File filename = new File(Url);
            String fileftp = "sync.db";
            fos = new FileInputStream(filename);
            
            boolean success = client.storeFile(fileftp, fos);
            fos.close();
            if (!success) {
                JOptionPane.showMessageDialog(null, filename.getName()+", UPload fail...");
            }
            client.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(debt_cust_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void status_syncing(){
        try {
            Properties p = new Properties();
            
            String syncing = "syncing";
            p.put("status", syncing);
            FileOutputStream out = new FileOutputStream("status_sync.ini");
            p.save(out, "/* properties updated */");
        } catch (Exception e) {System.out.println(e);}
    }
    
    public void status_synced(){
        try {
            Properties p = new Properties();
            
            String syncing = "synced";
            p.put("status", syncing);
            FileOutputStream out = new FileOutputStream("status_sync.ini");
            p.save(out, "/* properties updated */");
        } catch (Exception e) {System.out.println(e);}
    }
    
    private void cmd_syncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_syncActionPerformed
        try {
            download_sync_status();
            
            Properties p = new Properties();
            InputStream is = new FileInputStream("status_sync.ini");
            p.load(is);
            String status_sync = p.getProperty("status");
            if (status_sync.equals("synced")){
                JOptionPane.showMessageDialog(this, "data was synced");
            }else{JOptionPane.showMessageDialog(this, "other device are SYNCING, please try again late!");}
        } catch (IOException ex) {
            Logger.getLogger(debt_cust_frame.class.getName()).log(Level.SEVERE, null, ex);
        }finally {try {rs.close();pst.close();}catch (Exception e){}}
    }//GEN-LAST:event_cmd_syncActionPerformed

    public void copy_data(){
        try {
            String purl = lc2();
            String dbname = purl+"/database/sync.db";
            conn.prepareStatement("ATTACH DATABASE '" + dbname + "' AS  fromDB").execute();
            String sql = "INSERT INTO main.track_change (table_name, id, changedon, status)  SELECT table_name, id, changedon, status "
                    + "FROM fromDB.track_change WHERE fromDB.track_change.changedon Not IN (SELECT changedon FROM main.track_change)";
            //conn.prepareStatement(sql).execute();
            String sql2 = "SELECT count(table_name) FROM fromDB.track_change WHERE fromDB.track_change.changedon Not IN (SELECT changedon FROM main.track_change)";
            pst=conn.prepareStatement(sql2);
            rs=pst.executeQuery();
            if (rs.next()){
                final int count = rs.getInt(1);
                if (count < 1){
                    JOptionPane.showMessageDialog(null, "Không có thay đổi mới!");
                    rs.close();pst.close();
                    //conn.prepareStatement("DETACH DATABASE fromDB").execute();
                }else{
                    rs.close();pst.close();
                    conn.prepareStatement(sql).execute();}
            }
            
            conn.prepareStatement("DETACH DATABASE fromDB").execute();
            //conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(sync_status_frame.class.getName()).log(Level.SEVERE, null, ex);
        }finally {try {rs.close();pst.close();}catch (Exception e){}}
    }
    
    public void check_sync(String table){
        Statement stmt = null;
        try {
            stmt = conn.createStatement();
            String sync_table = "CREATE TABLE IF NOT EXISTS sync_table ("
                + "ID INTEGER PRIMARY KEY AUTOINCREMENT,"
                + "table_name_sync VARCHAR(45) NULL,"
                + "changedon_sync DATETIME NULL,"
                + "status_sync VARCHAR(45) NULL)";
            stmt.executeQuery(sync_table);
            
        } catch (SQLException ex) {
            Logger.getLogger(sync_status_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private void cmd_upload_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_upload_statusActionPerformed
        try{
            status_synced();
            upload_sync_status();
        }catch (Exception e) {System.out.println(e);}
    }//GEN-LAST:event_cmd_upload_statusActionPerformed

    private void cmd_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_copyActionPerformed
        copy_data();
    }//GEN-LAST:event_cmd_copyActionPerformed

    private void cmd_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_closeActionPerformed
        try {rs.close();pst.close();dispose();}catch (Exception e){}
        dispose();
    }//GEN-LAST:event_cmd_closeActionPerformed

    private void cmd_uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_uploadActionPerformed
        String data_type= "sync";
        upload_sync_database(data_type);
    }//GEN-LAST:event_cmd_uploadActionPerformed

    private void cmd_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_downloadActionPerformed
        download_sync_database();
    }//GEN-LAST:event_cmd_downloadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sync_status_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sync_status_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sync_status_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sync_status_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sync_status_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmd_close;
    private javax.swing.JButton cmd_copy;
    private javax.swing.JButton cmd_download;
    private javax.swing.JButton cmd_sync;
    private javax.swing.JButton cmd_upload;
    private javax.swing.JButton cmd_upload_status;
    // End of variables declaration//GEN-END:variables
}
